{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/builder/builder.component.ts","webpack:///src/app/components/builder/builder.component.html","webpack:///src/app/components/controls/division-select/division-select.component.ts","webpack:///src/app/components/controls/division-select/division-select.component.html","webpack:///src/app/components/controls/month-select/month-select.component.ts","webpack:///src/app/components/controls/month-select/month-select.component.html","webpack:///src/app/components/login/login.component.ts","webpack:///src/app/components/login/login.component.html","webpack:///src/app/components/navbar/navbar.component.ts","webpack:///src/app/components/navbar/navbar.component.html","webpack:///src/app/components/preferences/preferences.component.ts","webpack:///src/app/components/preferences/preferences.component.html","webpack:///src/app/components/report/report.component.ts","webpack:///src/app/components/report/report.component.html","webpack:///src/app/components/sections/abstract-section/abstract-section.component.ts","webpack:///src/app/components/sections/abstract-section/abstract-section.component.html","webpack:///src/app/components/sections/datagrid-section/datagrid-section.component.ts","webpack:///src/app/components/sections/datagrid-section/datagrid-section.component.html","webpack:///src/app/components/sections/simple-input/simple-input.component.ts","webpack:///src/app/components/sections/simple-input/simple-input.component.html","webpack:///src/app/components/start/start.component.ts","webpack:///src/app/components/start/start.component.html","webpack:///src/app/services/constant.service.ts","webpack:///src/app/services/report.service.ts","webpack:///src/app/services/template.service.ts","webpack:///src/app/services/user.service.ts","webpack:///src/assets/env.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","redirectUnauthorizedToLogin","rejectUnverified","user","console","log","routes","path","component","canActivate","data","authGuardPipe","AppRoutingModule","forRoot","imports","AppComponent","router","tserv","events","subscribe","url","navHidden","selector","templateUrl","styleUrls","AppModule","initializeApp","firebase","declarations","providers","bootstrap","schemas","BuilderComponent","_ActivatedRoute","_AngularFirestore","_ConstantService","_TS","_UserService","_Router","editSectionOpened","editPageOpened","saveTemplateOpen","emojiPickerOpened","saveLoadingStatus","DEFAULT","inputsForm","array","columnsForm","constants$","constants","getUserObservable","role","error","navigate","queryParamMap","paramMap","openTitle","get","openTemplate","originalTemplateName","_template","templateID","pageStatuses","pageCount","completionStatus","pages","templateChanged","tempPropsGroup","templateTitle","valueChanges","setTemplateTitle","value","reject","templateDoc","doc","pipe","docSnapshot","exists","templateHeader","promises","templatePages","i","push","pageDoc","collection","toString","page","all","warn","newTemplate","template","set","pageCollection","forEach","index","reason","newTitle","title","updateSidebar","pageExpansions","pageHovers","sectionHovers","sections","length","currentPage","section","pageIndex","datagrids","newSection","columns","type","JSON","stringify","inputs","metaSection","simpleInputs","sectionInEdit","parse","originalSectionIndex","currentIndex","movePage","resetPageIndices","fromIndex","toIndex","arr","splice","input","event","link","tags","refreshValueFromFields","moveSection","refreshTemp","colIndex","a","b","rowIndex","toggled","tag","cellTags","tagJ","cellVal","emojis","tagObj","stopPropagation","label","row","clearPrefill","confirm","resetSectionIndices","cancelEditSection","closeEditPage","object","hastag","col","cellIcons","searchIcon","includes","field","icon","tagIndex","eventData","detail","LOADING","saveTemplate","SUCCESS","setTimeout","alert","ERROR","hasMeta","validMessage","openSaveTemplate","DivisionSelectComponent","MonthSelectComponent","year","Date","getFullYear","onChange","newDateString","onTouched","_monthNames","date","toISOString","dateString","monthIndex","getMonth","formGroup","setValue","fn","isDisabled","disable","enable","monthInput","yearInput","newValue","indexOf","setMonth","setFullYear","provide","useExisting","multi","checkMatch","control","password1","password2","notMatching","checkEmail","email","domain","split","outsideEmail","LoginComponent","userv","currentScreen","alertMessage","loginGroup","emailInput","required","passwordInput","createAccountGroup","newPasswordInput","confirmPasswordInput","branchSelect","forgotPasswordGroup","password","logIn","showErrorAlert","newPassword","confirmPassword","branch","errors","hideAlert","createAccount","emailVerified","currentUser","sendEmailVerification","showSuccessAlert","setErrors","getError","sendPasswordResetEmail","showLogin","message","constantName","NavbarComponent","_ReportService","auth","vw","getReportObservable","observer","report","Math","max","document","documentElement","clientWidth","window","innerWidth","onresize","onoffline","offline","navigator","onLine","ononline","logOut","getUserSnapshot","PreferencesComponent","saveBtnState","setBranch","saveChanges","ReportComponent","activeRoute","markCompleteControl","submitButtonState","saveButtonState","saveSuccessful","submitConfirmationVisible","report$","page$","getPageObservable","params","urlPageNumber","undefined","currentPageIndex","openPage","newState","setPageStatus","saveReportOnline","reportID","snapshot","pageNumber","openReport","closeReport","savePageOnline","saveTime","now","editable","savePage","submitReport","setSectionValue","order","duplicateReport","newID","fullyComplete","elem","toFixed","cancelSubmitReport","goToPage","AbstractSection","subtitle","obj","arrayIndex","subarrayIndex","controls","checkboxArray","changeDetection","Default","DatagridSection","constantService","formArray","formLabels","sectionChanged","addModalOpened","editModalOpened","showItemAddConfirmation","tagArray","tagLabels","isoString","month","dt","getDate","result","inputString","stringPieces","monthNum","dateNum","yearNum","setDate","editData","cols","column","tagControl","hasTag","convertISOtoTraditional","j","at","convertTraditionalToISO","emit","addRowFromFormArray","reset","selectedRow","buildFormFromInterface","editRow","status","valid","openAddModal","SimpleInputSection","updateOn","savedData","currentDate","buildForm","rawFormData","inputObj","setCoverageDate","setAdditionalInfo","setTitle","setSubject","setTags","processedVals","checkTags","checked","_TemplateService","reports","StartComponent","_clipboardService","fb","detailState","editVisible","copyVisible","deleteVisible","exportVisible","filterVisible","newTemplateName","emailSent","templateModalVisible","tempDuplicateVisible","reportCount","selectedReports","_sizeLimit","selectedTemplates","selectedBranches","filterLoading","magicLoading","templateDupStatus","showUnverifiedAlert","fetchAllReportsWithLimit","fetchAllReports","fetchReportsByBranchWithLimit","fetchReportsByBranch","getReportCount","count","templates","templateObservable","templateLoadStatuses","templateNames","constObj","_constants","filterGroup","group","idSearch","authorSearch","coverageFrom","coverageTo","getFullReportCount","getReportCountByBranch","selectedReport","templateSnapshot","hidden","refreshReports","filters","filter","author","coverageDate","applyFilter","hideFilterModal","deleteLoading","deleteReport","reportList","getMagicString","stringResult","copyFromContent","sendVerificationEmail","templateName","dropdownIndex","createNewReport","selectedTemplate","selectedTemplateName","duplicateTemplate","deleteTemplate","newLimit","ConstantService","constDoc","next","asObservable","providedIn","ReportService","_report","_page","startPage","reportDoc","checkUniqueness","override","chars","floor","random","reportCollection","ref","where","generateReportID","templateReport","newReportID","pageCopyPromises","copyPromise","fromDoc","toDoc","originalReport","newReport","pagePromises","oldPage","promiseList","fullReport","reportHeader","docSnap","pageSnap","submitDate","additionalInfo","fullReports","resultString","redirectToHome","updateOnline","sectionIndex","isoDate","isNaN","getTime","info","subject","reportIDs","fetchPromises","fetchPromise","queryCollection","orderBy","sizeLimit","limit","size","branchName","TemplateService","_UserServ","_templateNames","_templates","Map","templates$","refreshTemplateList","clear","update","oldTemplate","queryParams","open","newTemplateID","confirmation","prompt","val","key","map","UserService","_AngularFireAuth","user$","authUser","_user","userDoc","signInWithEmailAndPassword","signOut","createUserWithEmailAndPassword","authcred","newBranch","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","environment","production","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { BuilderComponent } from './components/builder/builder.component';\nimport { PreferencesComponent } from './components/preferences/preferences.component';\nimport { ReportComponent } from './components/report/report.component';\nimport { StartComponent } from './components/start/start.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {\n  canActivate,\n  redirectUnauthorizedTo,\n  AngularFireAuthGuard,\n  redirectLoggedInTo,\n  emailVerified,\n  loggedIn,\n} from '@angular/fire/auth-guard';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { map } from 'rxjs/operators';\nconst redirectUnauthorizedToLogin = () => redirectUnauthorizedTo(['login']);\nconst rejectUnverified = () => emailVerified;\nmap((user) => {\n  console.log(user);\n});\nconst routes: Routes = [\n  {\n    path: 'report/:report-id/:page-number',\n    component: ReportComponent,\n    canActivate: [AngularFireAuthGuard],\n    data: { authGuardPipe: rejectUnverified },\n  },\n  {\n    path: 'preferences',\n    component: PreferencesComponent,\n    canActivate: [AngularFireAuthGuard],\n    data: { authGuardPipe: rejectUnverified },\n  },\n  {\n    path: 'builder',\n    component: BuilderComponent,\n    canActivate: [AngularFireAuthGuard],\n    data: { authGuardPipe: rejectUnverified },\n  },\n  {\n    path: '',\n    component: StartComponent,\n    canActivate: [AngularFireAuthGuard],\n    data: { authGuardPipe: redirectUnauthorizedToLogin },\n  },\n  {\n    path: 'login',\n    component: LoginComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { config } from './../assets/env';\r\nimport { TemplateService } from './services/template.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport * as firebase from 'firebase/app';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css'],\r\n})\r\nexport class AppComponent implements OnInit {\r\n  constructor(public router: Router, private tserv: TemplateService) {}\r\n  navHidden: boolean;\r\n\r\n  ngOnInit(): void {\r\n    this.router.events.subscribe((url) => {\r\n      this.navHidden = this.router.url === '/login' ? true : false;\r\n    });\r\n  }\r\n}\r\n","<div class=\"main-container\">\n  <app-navbar *ngIf=\"!navHidden\"></app-navbar>\n  <div class=\"content-container\"><router-outlet></router-outlet></div>\n</div>\n","import { ConstantService } from './services/constant.service';\nimport { ReportService } from 'src/app/services/report.service';\nimport { config } from './../assets/env';\nimport { TemplateService } from './services/template.service';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ClarityModule, ClrDropdown } from '@clr/angular';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { StartComponent } from './components/start/start.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { ReportComponent } from './components/report/report.component';\nimport { AbstractSection } from './components/sections/abstract-section/abstract-section.component';\nimport { DatagridSection } from './components/sections/datagrid-section/datagrid-section.component';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { DivisionSelectComponent } from './components/controls/division-select/division-select.component';\nimport { SimpleInputSection } from './components/sections/simple-input/simple-input.component';\nimport { MonthSelectComponent } from './components/controls/month-select/month-select.component';\nimport { AngularFireModule } from '@angular/fire';\nimport { UserService } from './services/user.service';\nimport { PreferencesComponent } from './components/preferences/preferences.component';\nimport { BuilderComponent } from './components/builder/builder.component';\nimport { ClipboardModule } from 'ngx-clipboard';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    StartComponent,\n    LoginComponent,\n    NavbarComponent,\n    ReportComponent,\n    AbstractSection,\n    DatagridSection,\n    DivisionSelectComponent,\n    SimpleInputSection,\n    MonthSelectComponent,\n    PreferencesComponent,\n    BuilderComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ClarityModule,\n    BrowserAnimationsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ClipboardModule,\n    AngularFireModule.initializeApp(config.firebase),\n  ],\n  providers: [TemplateService, UserService, ConstantService, ReportService],\n  bootstrap: [AppComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class AppModule {}\n","import { UserService } from './../../services/user.service';\nimport { ClrLoadingState } from '@clr/angular';\nimport { TemplateService } from './../../services/template.service';\nimport { ConstantService } from './../../services/constant.service';\nimport {\n  SimpleInputInterface,\n  DatagridInterface,\n  SectionInterface,\n  Input,\n  Column,\n} from './../../interfaces/sections';\nimport { Report } from 'src/app/interfaces/report';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { UnifiedReport } from './../../interfaces/report';\nimport {\n  FormGroup,\n  FormControl,\n  Validators,\n  FormArray,\n  AbstractControl,\n} from '@angular/forms';\nimport {\n  Component,\n  OnInit,\n  NgModule,\n  CUSTOM_ELEMENTS_SCHEMA,\n} from '@angular/core';\nimport { Page } from 'src/app/interfaces/page';\nimport { first } from 'rxjs/operators';\nimport 'emoji-picker-element';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-builder',\n  templateUrl: './builder.component.html',\n  styleUrls: ['./builder.component.css'],\n})\nexport class BuilderComponent implements OnInit {\n  _template: UnifiedReport;\n\n  tempPropsGroup: FormGroup;\n  pageExpansions: boolean[];\n  pageHovers: boolean[];\n  sectionHovers: boolean[][];\n  iconNames: string[];\n  editSectionOpened: boolean = false;\n  editPageOpened: boolean = false;\n  saveTemplateOpen: boolean = false;\n  emojiPickerOpened: boolean = false;\n  originalTemplateName: string;\n  saveLoadingStatus: ClrLoadingState = ClrLoadingState.DEFAULT;\n  // sectionPropsForm: FormGroup = new FormGroup({\n  //   title: new FormControl(),\n  //   subtitle: new FormControl(),\n  //   type: new FormControl(),\n  //   columns: new FormControl(),\n  //   inputs: new FormControl(),\n  //   tags: new FormControl(),\n  // });\n  inputsForm: FormGroup = new FormGroup({\n    array: new FormArray([]),\n  });\n  columnsForm: FormGroup = new FormGroup({\n    array: new FormArray([]),\n  });\n\n  currentPage: Page;\n  originalSectionIndex: number;\n  sectionInEdit: Object;\n  validMessage: string;\n  constants$: Observable<Object>;\n  divisions: Object[];\n  metaSection: SimpleInputInterface;\n\n  constructor(\n    public _ActivatedRoute: ActivatedRoute,\n    public _AngularFirestore: AngularFirestore,\n    public _ConstantService: ConstantService,\n    public _TS: TemplateService,\n    public _UserService: UserService,\n    public _Router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.constants$ = this._ConstantService.constants;\n    this._UserService.getUserObservable().subscribe((user) => {\n      console.log(user);\n      if (user && user.role !== 'admin') {\n        console.error('The Builder is for admins only. Redirecting home.');\n        this._Router.navigate(['']);\n      }\n    });\n    this._ActivatedRoute.queryParamMap.subscribe((paramMap) => {\n      let openTitle = paramMap.get('open');\n      //if an existing template has been passed to the URL\n      if (openTitle) {\n        this.openTemplate(openTitle)\n          .then(() => {\n            this.originalTemplateName = this._template.templateID;\n            console.log(this._template);\n          })\n          .catch(() => {});\n      } else {\n        this._template = {\n          id: null,\n          templateID: '',\n          pageStatuses: [],\n          pageCount: 0,\n          completionStatus: 'incomplete',\n          pages: [],\n        };\n        this.templateChanged();\n      }\n    });\n    this.tempPropsGroup = new FormGroup({\n      templateTitle: new FormControl(''),\n    });\n\n    this.tempPropsGroup.valueChanges.subscribe(() => {\n      this.setTemplateTitle(this.tempPropsGroup.get('templateTitle').value);\n    });\n    // this.pushTemplateObjectToDB(outlineReport, outlinePages);\n  }\n\n  openTemplate(templateID: string): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      console.log('[Builder] Opening ' + templateID + '...');\n      let templateDoc = this._AngularFirestore.doc<Report>(\n        '/templates/' + templateID\n      );\n\n      templateDoc\n        .get()\n        .pipe(first())\n        .subscribe((docSnapshot) => {\n          if (docSnapshot.exists) {\n            let templateHeader: Report = docSnapshot.data() as Report;\n            let promises: Promise<void>[] = [];\n            //get all pages stored in subcollection\n            let templatePages: Page[] = [];\n            for (let i = 0; i < templateHeader.pageCount; i++) {\n              promises.push(\n                new Promise<void>((resolve, reject) => {\n                  let pageDoc = templateDoc\n                    .collection('pages')\n                    .doc<Page>(i.toString());\n                  pageDoc\n                    .valueChanges()\n                    .pipe(first())\n                    .subscribe((page) => {\n                      templatePages.push(page);\n                      resolve();\n                    }, reject);\n                })\n              );\n            }\n            Promise.all(promises).then(\n              () => {\n                this._template = {\n                  id: null,\n                  templateID: templateHeader.templateID,\n                  pageStatuses: templateHeader.pageStatuses,\n                  pageCount: templateHeader.pageCount,\n                  completionStatus: templateHeader.completionStatus,\n                  pages: templatePages,\n                };\n                this.templateChanged();\n                resolve();\n              },\n              () => {\n                reject();\n              }\n            );\n          } else {\n            console.warn(\n              'Template ' +\n                templateID +\n                ' does not exist. Setting to empty template instead.'\n            );\n            this._TS.newTemplate();\n            reject();\n          }\n        }, reject);\n    });\n  }\n\n  pushTemplateObjectToDB(template: Report, pages: Page[]) {\n    let templateDoc = this._AngularFirestore.doc(\n      '/templates/' + template.templateID\n    );\n    templateDoc\n      .set(template)\n      .then(() => {\n        let pageCollection = templateDoc.collection('pages');\n        pages.forEach((page, index) => {\n          console.log(page);\n          pageCollection.doc(index.toString()).set(page);\n        });\n      })\n      .catch((reason) => {\n        console.log(reason);\n      })\n      .finally(() =>\n        console.log('Template ' + template.templateID + ' pushed')\n      );\n  }\n\n  setTemplateTitle(newTitle) {\n    if (this._template) {\n      this._template.title = newTitle;\n      console.log('[Builder] Template title is now ' + newTitle);\n    }\n  }\n\n  get hasMetaSection(): boolean {\n    let hasMeta = false;\n    this._template.pages.forEach((page) => {\n      page.sections.forEach((section) => {\n        if (section['type'] === 'meta') {\n          this.metaSection = section as SimpleInputInterface;\n          hasMeta = true;\n        }\n      });\n    });\n    return hasMeta;\n  }\n\n  templateChanged() {\n    this.updateSidebar();\n  }\n\n  updateSidebar() {\n    if (this._template) {\n      this.pageExpansions = [];\n      this.pageHovers = [];\n      this.sectionHovers = [[]];\n      this._template.pages.forEach((page, index) => {\n        this.pageExpansions.push(false);\n        this.pageHovers.push(false);\n        let sections: boolean[] = [];\n        page.sections.forEach(() => {\n          sections.push(false);\n        });\n        this.sectionHovers.push(sections);\n      });\n      console.log(this.sectionHovers);\n    }\n  }\n\n  addPage() {\n    this._template.pages.push({\n      title: 'Untitled page',\n      index: this._template.pages.length,\n      sections: [],\n    });\n    if (!this._template.pageStatuses) {\n      this._template.pageStatuses = [];\n    }\n    this._template.pageStatuses.push('incomplete');\n    this._template.pageCount++;\n    console.log(this._template.pages.length);\n  }\n\n  setCurrentPage(index: number) {\n    this.currentPage = this._template.pages[index];\n  }\n\n  get templateValid() {\n    if (!this._template) {\n      this.validMessage = 'Template is missing.';\n      return false;\n    } else if (\n      !this._template.templateID ||\n      this._template.templateID.length < 1\n    ) {\n      this.validMessage = 'Template title is missing.';\n      return false;\n    } else {\n      this.validMessage = 'Ready to save.';\n      return true;\n    }\n  }\n\n  get pagesEmpty() {\n    if (\n      !this._template ||\n      !this._template.pages ||\n      this._template.pages.length < 1\n    ) {\n      return true;\n    } else return false;\n  }\n\n  isDatagrid(section: Object) {\n    if (!section || section['type'] !== 'datagrid') {\n      return false;\n    } else return true;\n  }\n  isSimpleInput(section: Object) {\n    if (!section || section['type'] !== 'simple-input') {\n      return false;\n    } else return true;\n  }\n  hasInputs(section: Object) {\n    if (\n      !section ||\n      section['type'] !== 'simple-input' ||\n      !section['inputs'] ||\n      section['inputs'].length < 1\n    ) {\n      return false;\n    } else return true;\n  }\n\n  getDatagrids(pageIndex) {\n    let datagrids: Object[] = [];\n    if (this._template && this._template.pages) {\n      this._template.pages[pageIndex].sections.forEach((section) => {\n        if (section['type'] === 'datagrid') {\n          datagrids.push(section);\n        }\n      });\n    }\n    return datagrids;\n  }\n\n  addDatagrid(pageIndex) {\n    if (this._template && this._template.pages) {\n      let newSection: DatagridInterface = {\n        title: 'Untitled',\n        columns: [],\n        value: [],\n        type: 'datagrid',\n        index: this._template.pages[pageIndex].sections.length,\n      };\n      this._template.pages[pageIndex].sections.push(newSection);\n      console.log(\n        'Datagrid added. Sections now: ' +\n          this._template.pages[pageIndex].sections\n      );\n    }\n  }\n\n  getMagicText(): string {\n    if (!this._template) {\n      return 'No template open';\n    }\n    return JSON.stringify(this._template, null, 4);\n  }\n\n  getSectionsByType(pageIndex: number, type: string) {\n    let sections: Object[] = [];\n    let page = this._template.pages[pageIndex] as Page;\n    page.sections.forEach((section) => {\n      if (section['type'] === type) {\n        sections.push(section);\n      }\n    });\n    return sections;\n  }\n\n  addMetaSection(pageIndex) {\n    if (this._template && this._template.pages) {\n      let newSection: SimpleInputInterface = {\n        title: 'Untitled',\n        inputs: [],\n        value: [],\n        type: 'meta',\n        index: this._template.pages[pageIndex].sections.length,\n      };\n      this._template.pages[pageIndex].sections.push(newSection);\n      this.metaSection = newSection;\n      console.log(\n        'Meta added. Sections now: ' + this._template.pages[pageIndex].sections\n      );\n    }\n  }\n\n  getSimpleInputs(pageIndex) {\n    let simpleInputs: Object[] = [];\n    if (this._template && this._template.pages) {\n      this._template.pages[pageIndex].sections.forEach((section) => {\n        if (section['type'] === 'simple-input') {\n          simpleInputs.push(section);\n        }\n      });\n    }\n    return simpleInputs;\n  }\n\n  addSimpleInput(pageIndex) {\n    if (this._template && this._template.pages) {\n      let newSection: SimpleInputInterface = {\n        title: 'Untitled',\n        inputs: [],\n        value: [],\n        type: 'simple-input',\n        index: this._template.pages[pageIndex].sections.length,\n      };\n      this._template.pages[pageIndex].sections.push(newSection);\n      console.log(\n        'SimpleInput added. Sections now: ' +\n          this._template.pages[pageIndex].sections\n      );\n    }\n  }\n\n  sectionTypeChanged(section) {\n    if (section.type === 'simple-input') {\n      if (!section['inputs']) {\n        section['inputs'] = [];\n      }\n    } else if (section.type === 'datagrid') {\n      if (!section['columns']) {\n        section['columns'] = [];\n      }\n    } else {\n      console.error('New section type unrecognized: ' + section.type);\n    }\n  }\n\n  setSection(section: Object, data: Object) {}\n  cancelEditSection() {\n    this.editSectionOpened = false;\n  }\n\n  openSaveTemplate() {\n    this.saveTemplateOpen = true;\n  }\n\n  cancelSaveTemplate() {\n    this.saveTemplateOpen = false;\n  }\n\n  openEditSection(section: Object) {\n    //deep copy the section\n    this.sectionInEdit = JSON.parse(JSON.stringify(section));\n\n    this.originalSectionIndex = this.sectionInEdit['index'];\n    this.editSectionOpened = true;\n  }\n\n  openEditPage(page: Page) {\n    this.editPageOpened = true;\n    console.log('Opening page');\n  }\n  closeEditPage() {\n    this.editPageOpened = false;\n  }\n  movePageUp() {\n    let currentIndex = this.currentPage.index;\n    this.movePage(currentIndex, currentIndex - 1);\n    this.resetPageIndices();\n  }\n  movePageDown() {\n    let currentIndex = this.currentPage.index;\n    this.movePage(currentIndex, currentIndex + 1);\n    this.resetPageIndices();\n  }\n  movePage(fromIndex: number, toIndex: number) {\n    console.log('Moving to ' + toIndex);\n    if (toIndex >= 0 && toIndex < this._template.pages.length) {\n      let arr = this._template.pages;\n      arr.splice(toIndex, 0, arr.splice(fromIndex, 1)[0]);\n    } else console.error(\"Can't move page. Out of bounds.\");\n  }\n  moveInArray(fromIndex: number, toIndex: number, array: any[]) {\n    console.log('Moving to ' + toIndex);\n    if (toIndex >= 0 && toIndex < array.length) {\n      array.splice(toIndex, 0, array.splice(fromIndex, 1)[0]);\n    } else console.error(\"Can't move page. Out of bounds.\");\n  }\n  deleteInArray(index: number, array: any[]) {\n    if (index >= 0 && index < array.length) {\n      array.splice(index, 1);\n    } else console.error(\"Can't delete element. Out of bounds.\");\n  }\n\n  linkChanged(input: Input, event) {\n    console.log('Link changed');\n\n    if (input.link === 'title') {\n      input.type = 'text';\n    } else if (input.link === 'coverageDate') {\n      input.type = 'month-select';\n    } else if (input.link === 'additionalInfo') {\n      input.type = 'textarea';\n    } else if (input.link === 'subject') {\n      input.type = 'text';\n    } else if (input.link === 'tags') {\n      input.type = 'tag-select';\n      if (!input.tags) {\n        input['tags'] = [];\n      }\n    }\n    this.refreshValueFromFields();\n  }\n\n  resetPageIndices() {\n    this._template.pages.forEach((page, index) => {\n      page.index = index;\n    });\n  }\n\n  resetSectionIndices() {\n    this.currentPage.sections.forEach((section: SectionInterface, index) => {\n      section.index = index;\n    });\n  }\n\n  finishEditSection() {\n    console.log(this.sectionInEdit);\n    this.moveSection(this.originalSectionIndex, this.sectionInEdit['index']);\n    this._template['pages'][this.currentPage.index]['sections'][\n      this.sectionInEdit['index']\n    ] = this.sectionInEdit;\n    //now reevaluate the 'index' section properties\n    this.currentPage.sections.forEach((section, index) => {\n      section['index'] = index;\n    });\n\n    //we reload the preview area after each successful push\n    let refreshTemp = this.currentPage;\n\n    this.editSectionOpened = false;\n  }\n\n  finishEditPage() {\n    this.editPageOpened = false;\n  }\n\n  isDatatype(colIndex: number, type: string) {\n    if (\n      this.sectionInEdit['columns'] &&\n      this.sectionInEdit['columns'][colIndex]['type'] === type\n    ) {\n      return true;\n    }\n    if (\n      this.sectionInEdit['inputs'] &&\n      this.sectionInEdit['inputs'][colIndex]['type'] === type\n    ) {\n      return true;\n    } else return false;\n  }\n\n  isEqual(a, b) {\n    return a === b;\n  }\n\n  isSectionType(section, type) {\n    if (!section) {\n      return false;\n    }\n    return section['type'] === type;\n  }\n  isPlainDt(colIndex: number) {\n    let type = this.sectionInEdit['columns'][colIndex]['type'];\n    if (\n      !(\n        type === 'tag-select' ||\n        type === 'date-select' ||\n        type === 'month-select'\n      )\n    ) {\n      return true;\n    } else return false;\n  }\n\n  get tag() {\n    return 'Hello';\n  }\n\n  toggleTag(rowIndex, colIndex, toggled: boolean, tag) {\n    let cellTags: Object[] = this.sectionInEdit['value'][rowIndex]['row'][\n      colIndex\n    ]['tags'];\n    if (toggled === true) {\n      //add the tag to the section value\n      cellTags.push(tag);\n    } else {\n      //remove the tag\n      cellTags.forEach((tagJ, index) => {\n        if (tag['label'] === tagJ['label']) {\n          cellTags.splice(index, 1);\n        }\n      });\n    }\n    console.log(this.sectionInEdit);\n  }\n\n  renderDgCell(rowIndex: number, colIndex: number) {\n    let cellVal = this.sectionInEdit['value'][rowIndex]['row'][colIndex];\n    let type = this.sectionInEdit['columns'][colIndex]['type'];\n    if (type === 'tag-select') {\n      let emojis: string = '';\n      (cellVal['tags'] as Object[]).forEach((tagObj) => {\n        emojis = emojis + ' ' + tagObj['icon'];\n      });\n      return emojis;\n    } else {\n      return cellVal;\n    }\n  }\n\n  // Array.prototype.move = function(from, to) {\n  //   this.splice(to, 0, this.splice(from, 1)[0]);\n  // };\n\n  moveSection(fromIndex: number, toIndex: number) {\n    console.log('Moving to ' + toIndex);\n    if (toIndex >= 0 && toIndex < this.currentPage.sections.length) {\n      let arr = this.currentPage.sections;\n      arr.splice(toIndex, 0, arr.splice(fromIndex, 1)[0]);\n    } else console.error(\"Can't move section. Out of bounds.\");\n  }\n\n  addColumn(event: Event) {\n    event.stopPropagation();\n    if (!this.sectionInEdit['columns']) {\n      this.sectionInEdit['columns'] = [{ label: 'New column', type: 'text' }];\n    } else {\n      (this.sectionInEdit['columns'] as Object[]).push({\n        label: 'New column',\n        type: 'text',\n        tags: [],\n      });\n      //push an empty column to each row\n      (this.sectionInEdit['value'] as Object[]).forEach((row) => {\n        (row['row'] as Object[]).push('');\n      });\n    }\n  }\n\n  clearPrefill() {\n    if (this.sectionInEdit['value']) {\n      this.sectionInEdit['value'] = [];\n    }\n  }\n\n  deleteColumn(index: number) {\n    //if prefill exists, clear it\n    this.clearPrefill();\n    console.log(this.sectionInEdit['columns']);\n    (this.sectionInEdit['columns'] as Object[]).splice(index, 1);\n    console.log(this.sectionInEdit['columns']);\n  }\n  deleteInput(index: number) {\n    this.clearPrefill();\n    (this.sectionInEdit['inputs'] as Object[]).splice(index, 1);\n  }\n  deleteSection(section) {\n    if (\n      confirm('Are you sure you want to delete \"' + section['title'] + '\"?')\n    ) {\n      this.currentPage.sections.splice(section['index'], 1);\n      this.resetSectionIndices();\n      console.log('Section @ ' + section['index'] + ' deleted.');\n      this.cancelEditSection();\n    }\n  }\n  deletePage(pageIndex) {\n    if (\n      confirm(\n        'Delete page ' +\n          (pageIndex + 1) +\n          ' (' +\n          this._template.pages[pageIndex].title +\n          ')?'\n      )\n    ) {\n      //close the current page if it's being deleted\n      if (this.currentPage.index === pageIndex) {\n        this.currentPage = null;\n      }\n      this._template.pages.splice(pageIndex, 1);\n      this._template.pageCount--;\n      this.closeEditPage();\n    }\n  }\n\n  addInput(event: Event) {\n    event.stopPropagation();\n    let inputs = this.sectionInEdit['inputs'] as Object[];\n    if (!inputs) {\n      inputs = [];\n    }\n    if (this.sectionInEdit['type'] === 'meta') {\n      inputs.push({\n        label: 'Untitled',\n        type: 'month-select',\n        link: 'coverageDate', //default link\n        tags: [],\n      });\n    } else {\n      inputs.push({\n        label: 'Untitled',\n        type: 'text',\n        link: null, //default link\n        tags: [],\n      });\n    }\n    this.refreshValueFromFields();\n  }\n\n  hoverEnterPageSB(pageIndex) {\n    this.pageHovers[pageIndex] = true;\n  }\n  hoverLeavePageSB(pageIndex) {\n    this.pageHovers[pageIndex] = false;\n  }\n\n  hasTagSelect(object: Object): boolean {\n    let hastag: boolean = false;\n    if (object['inputs']) {\n      (object['inputs'] as Object[]).forEach((input) => {\n        if (input['type'] === 'tag-select') {\n          hastag = true;\n        }\n      });\n    } else if (object['columns']) {\n      (object['columns'] as Object[]).forEach((col) => {\n        if (col['type'] === 'tag-select') {\n          hastag = true;\n        }\n      });\n    }\n    return hastag;\n  }\n\n  hasTag(rowIndex: number, colIndex: number, tag: Object) {\n    let cellTags: Object[] = this.sectionInEdit['value'][rowIndex]['row'][\n      colIndex\n    ]['tags'];\n    let cellIcons: string[] = [];\n    cellTags.forEach((tag) => {\n      cellIcons.push(tag['icon']);\n    });\n\n    let searchIcon = tag['icon'];\n    return cellIcons.includes(searchIcon);\n  }\n\n  hasPrefill(object: Object): boolean {\n    if (object['value'] && (object['value'] as Object[]).length > 0) {\n      return true;\n    } else return false;\n  }\n\n  addTag(field: Object, event: Event) {\n    event.stopPropagation();\n    console.log(field);\n    if (!field['tags']) {\n      field['tags'] = [];\n    }\n    field['tags'].push({\n      icon: '❓',\n      label: 'Untitled',\n    });\n    console.log(field);\n    this.refreshValueFromFields();\n  }\n\n  refreshValueFromFields() {\n    let value = [];\n    if (this.sectionInEdit['inputs']) {\n      this.sectionInEdit['inputs'].forEach((input: Input) => {\n        if (input.type === 'tag-select') {\n          value.push({ tags: [] });\n        } else value.push(null);\n      });\n      this.sectionInEdit['value'] = value;\n      console.log('Value refreshed: ');\n      console.log(this.sectionInEdit['value']);\n    } else if (this.sectionInEdit['columns']) {\n      this.sectionInEdit['columns'].forEach((col: Column) => {\n        if (col.type === 'tag-select') {\n          value.push({ tags: [] });\n        } else value.push(null);\n      });\n      this.sectionInEdit['value'] = [{ row: value }];\n      console.log('Value refreshed: ');\n      console.log(this.sectionInEdit['value']);\n    } else {\n      console.error(\n        'Could not refresh value from fields: no columns or inputs were found.'\n      );\n    }\n  }\n\n  typeChanged(field: Object, event: Event) {\n    this.refreshValueFromFields();\n    console.log(this.sectionInEdit);\n  }\n\n  deleteTag(input: Input, index: number) {\n    console.log(input.tags.splice(index, 1));\n  }\n\n  editTagEmoji(field: Object, tagIndex: number, eventData: CustomEvent) {\n    console.log(tagIndex, eventData.detail);\n    field['tags'][tagIndex]['icon'] = eventData.detail['unicode'];\n    console.log(this.sectionInEdit);\n  }\n\n  saveTemplate() {\n    this.saveLoadingStatus = ClrLoadingState.LOADING;\n    this._TS\n      .saveTemplate(this._template)\n      .then(() => {\n        this.saveLoadingStatus = ClrLoadingState.SUCCESS;\n        setTimeout(() => {\n          this.saveTemplateOpen = false;\n        }, 500);\n        this._TS.openTemplate(this._template.templateID);\n      })\n      .catch((reason) => {\n        console.error('Save failed: ' + reason);\n        alert('Save failed: ' + reason);\n        this.saveLoadingStatus = ClrLoadingState.ERROR;\n      });\n  }\n}\n","<div\n  class=\"clr-row clr-justify-content-between\"\n  style=\"width: 100vw; overflow: hidden;\"\n>\n  <div\n    class=\"clr-col-3 builder-sidebar\"\n    style=\"\n      box-shadow: 0px 10px 18px #c7c6c6;\n      margin-left: 10px;\n      overflow-y: auto;\n    \"\n  >\n    <div class=\"clr-row\" style=\"margin: 1rem 0 1rem 0;\">\n      <clr-input-container style=\"margin-top: 3rem;\">\n        <input\n          class=\"templateTitle\"\n          clrInput\n          placeholder=\"Untitled template\"\n          name=\"name\"\n          *ngIf=\"_template\"\n          [(ngModel)]=\"_template.templateID\"\n        />\n        <clr-control-helper>Template title</clr-control-helper>\n      </clr-input-container>\n    </div>\n\n    <span class=\"clr-row\" *ngIf=\"pagesEmpty\"\n      ><clr-icon shape=\"help-info\"></clr-icon><em>No pages yet.</em>\n    </span>\n    <div class=\"clr-row\" *ngIf=\"_template\">\n      <clr-tree>\n        <clr-tree-node *ngIf=\"_template.pages\">\n          <h4 style=\"margin: 0;\">Overview</h4>\n          <clr-tooltip>\n            <clr-icon\n              clrTooltipTrigger\n              shape=\"help-info\"\n              size=\"16\"\n              aria-label=\"Uniq tooltip 3\"\n            ></clr-icon>\n            <clr-tooltip-content\n              clrPosition=\"bottom-right\"\n              clrSize=\"md\"\n              *clrIfOpen\n            >\n              <span\n                >Double click on a page or section below to open the properties\n                pane. Use the \"+\" buttons to add content.</span\n              >\n            </clr-tooltip-content>\n          </clr-tooltip>\n          <button\n            class=\"btn btn-sm btn-link btn-icon\"\n            title=\"Add page\"\n            (click)=\"addPage()\"\n          >\n            <clr-icon shape=\"plus\"></clr-icon>\n          </button>\n        </clr-tree-node>\n        <clr-tree-node\n          *ngFor=\"let page of _template.pages; index as i\"\n          [(clrExpanded)]=\"pageExpansions[i]\"\n          (click)=\"setCurrentPage(i)\"\n        >\n          <div class=\"tree-text clr-row\" (dblclick)=\"openEditPage(i)\">\n            <div><clr-icon shape=\"file\"></clr-icon> {{ page.title }}</div>\n          </div>\n          <clr-tree-node>\n            <p class=\"p4\" style=\"margin: 0;\"></p>\n            <button\n              class=\"btn btn-sm btn-link\"\n              title=\"Add Meta Section\"\n              (click)=\"addMetaSection(i)\"\n              *ngIf=\"!hasMetaSection\"\n            >\n              Add Meta Section\n              <clr-icon shape=\"plus\"></clr-icon>\n            </button>\n          </clr-tree-node>\n          <clr-tree-node\n            *ngFor=\"let section of getSectionsByType(i, 'meta')\"\n            style=\"width: 100%;\"\n            (dblclick)=\"openEditSection(section)\"\n          >\n            <div class=\"tree-text\">\n              {{ section.title\n              }}<clr-icon\n                shape=\"flag\"\n                class=\"is-solid is-error\"\n                title=\"Meta section\"\n              ></clr-icon>\n            </div>\n          </clr-tree-node>\n          <clr-tree-node>\n            <p class=\"p4\" style=\"margin: 0;\">Datagrids</p>\n            <button\n              class=\"btn btn-sm btn-link btn-icon\"\n              title=\"Add Datagrid\"\n              (click)=\"addDatagrid(i)\"\n            >\n              <clr-icon shape=\"plus\"></clr-icon>\n            </button>\n          </clr-tree-node>\n\n          <clr-tree-node\n            *ngFor=\"let section of getDatagrids(i)\"\n            style=\"width: 100%;\"\n            (dblclick)=\"openEditSection(section)\"\n          >\n            <clr-icon shape=\"table\"></clr-icon>\n            <div class=\"tree-text\">{{ section.title }}</div>\n          </clr-tree-node>\n          <clr-tree-node>\n            <p class=\"p4\" style=\"margin: 0;\">SimpleInputs</p>\n            <button\n              class=\"btn btn-sm btn-link btn-icon\"\n              title=\"Add Datagrid\"\n              (click)=\"addSimpleInput(i)\"\n            >\n              <clr-icon shape=\"plus\"></clr-icon>\n            </button>\n          </clr-tree-node>\n          <clr-tree-node\n            *ngFor=\"let section of getSimpleInputs(i)\"\n            style=\"width: 100%;\"\n            (dblclick)=\"openEditSection(section)\"\n          >\n            <clr-icon shape=\"form\"></clr-icon>\n            <div class=\"tree-text\">\n              {{ section.title }}\n            </div>\n          </clr-tree-node>\n        </clr-tree-node>\n      </clr-tree>\n    </div>\n  </div>\n  <div class=\"clr-col preview-area\" *ngIf=\"currentPage\">\n    <div class=\"clr-row\">\n      <div class=\"clr-col-1 clr-align-self-center\" style=\"padding: 0;\">\n        <div class=\"clr-row clr-justify-content-end clr-align-items-end\">\n          <button\n            class=\"btn btn-link btn-icon\"\n            style=\"margin-right: 1rem;\"\n            (click)=\"openEditPage(currentPage)\"\n          >\n            <clr-icon shape=\"pencil\" style=\"color: black;\"></clr-icon>\n          </button>\n        </div>\n      </div>\n      <div class=\"clr-col-11\" style=\"padding: 0;\">\n        <h1>{{ currentPage.title }}</h1>\n      </div>\n    </div>\n    <hr />\n\n    <div class=\"clr-row\" *ngFor=\"let section of currentPage.sections\">\n      <div class=\"clr-col-1 clr-align-self-center\" style=\"padding: 0;\">\n        <div class=\"clr-row clr-justify-content-end\">\n          <button\n            class=\"btn btn-link btn-icon\"\n            style=\"margin-right: 1rem;\"\n            (click)=\"openEditSection(section)\"\n          >\n            <clr-icon shape=\"pencil\" style=\"color: black;\"></clr-icon>\n          </button>\n        </div>\n      </div>\n      <div class=\"clr-col-11\" style=\"padding: 0;\">\n        <datagrid-section\n          *ngIf=\"isDatagrid(section); else simpleInput\"\n          [interface]=\"section\"\n          (sectionChanged)=\"setSection(section, $event)\"\n          class=\"grayout\"\n        >\n        </datagrid-section>\n        <ng-template #simpleInput>\n          <simple-input\n            [interface]=\"section\"\n            (sectionChanged)=\"setSection(section, $event)\"\n            class=\"grayout\"\n          ></simple-input>\n        </ng-template>\n        <div></div>\n      </div>\n    </div>\n\n    <clr-modal [(clrModalOpen)]=\"editSectionOpened\" [clrModalSize]=\"'xl'\">\n      <h3 class=\"modal-title\">Section properties</h3>\n      <div class=\"modal-body\" style=\"overflow: auto;\">\n        <clr-tabs>\n          <clr-tab>\n            <button clrTabLink id=\"link1\">Properties</button>\n            <clr-tab-content id=\"content1\" *clrIfActive>\n              <clr-stack-view>\n                <clr-stack-block>\n                  <clr-stack-label>Title</clr-stack-label>\n                  <clr-stack-content>\n                    <input\n                      type=\"text\"\n                      [(ngModel)]=\"sectionInEdit['title']\"\n                      class=\"clr-input\"\n                    />\n                  </clr-stack-content>\n                </clr-stack-block>\n                <clr-stack-block>\n                  <clr-stack-label>Subtitle (optional)</clr-stack-label>\n                  <clr-stack-content>\n                    <input\n                      type=\"text\"\n                      [(ngModel)]=\"sectionInEdit['subtitle']\"\n                      class=\"clr-input\"\n                    />\n                  </clr-stack-content>\n                </clr-stack-block>\n                <clr-stack-block>\n                  <clr-stack-label\n                    >Type<clr-tooltip>\n                      <clr-icon\n                        clrTooltipTrigger\n                        shape=\"help-info\"\n                        size=\"16\"\n                      ></clr-icon>\n                      <clr-tooltip-content\n                        clrPosition=\"right\"\n                        clrSize=\"lg\"\n                        *clrIfOpen\n                      >\n                        <span\n                          ><em>Datagrids</em> are tables, good for lots of\n                          data.<br /><em>SimpleInputs</em> are basic forms, good\n                          for a few questions.<br /><em>Meta sections</em> are\n                          SimpleInputs that link to properties in the report--\n                          i.e. coverage date.</span\n                        >\n                      </clr-tooltip-content>\n                    </clr-tooltip></clr-stack-label\n                  >\n                  <clr-stack-content>\n                    <select\n                      [(ngModel)]=\"sectionInEdit['type']\"\n                      (ngModelChange)=\"sectionTypeChanged(sectionInEdit)\"\n                      class=\"clr-select\"\n                    >\n                      <option value=\"datagrid\">Datagrid</option>\n                      <option value=\"simple-input\">SimpleInput</option>\n                      <option value=\"meta\">Meta</option>\n                    </select>\n                  </clr-stack-content>\n                </clr-stack-block>\n                <clr-stack-block>\n                  <clr-stack-label>Order</clr-stack-label>\n                  <clr-stack-content>\n                    <button\n                      class=\"btn btn-link btn-sm\"\n                      title=\"Move up\"\n                      (click)=\"\n                        sectionInEdit['index'] = sectionInEdit['index'] - 1\n                      \"\n                      [disabled]=\"sectionInEdit['index'] < 1\"\n                      style=\"margin: 0;\"\n                    >\n                      <clr-icon shape=\"angle\" dir=\"up\"></clr-icon>\n                    </button>\n                    {{ sectionInEdit[\"index\"] + 1 }}/{{\n                      currentPage.sections.length\n                    }}\n                    <button\n                      class=\"btn btn-link btn-sm\"\n                      title=\"Move down\"\n                      style=\"margin: 0;\"\n                      (click)=\"\n                        sectionInEdit['index'] = sectionInEdit['index'] + 1\n                      \"\n                      [disabled]=\"\n                        sectionInEdit['index'] > currentPage.sections.length - 2\n                      \"\n                    >\n                      <clr-icon shape=\"angle\" dir=\"down\"></clr-icon>\n                    </button>\n                  </clr-stack-content>\n                </clr-stack-block>\n                <clr-stack-block *ngIf=\"isDatagrid(sectionInEdit)\">\n                  <clr-stack-label>\n                    Columns\n                    <clr-tooltip *ngIf=\"hasPrefill(sectionInEdit)\">\n                      <clr-icon\n                        clrTooltipTrigger\n                        shape=\"warning-standard\"\n                        class=\"is-warning is-solid\"\n                        size=\"16\"\n                      ></clr-icon>\n                      <clr-tooltip-content\n                        clrPosition=\"top-right\"\n                        clrSize=\"md\"\n                        *clrIfOpen\n                      >\n                        <span\n                          >Modifying this section might\n                          <b>clear existing prefill</b>.</span\n                        >\n                      </clr-tooltip-content>\n                    </clr-tooltip>\n                  </clr-stack-label>\n                  <clr-stack-content>\n                    <span *ngIf=\"sectionInEdit['columns']\"\n                      >{{ sectionInEdit[\"columns\"].length }} columns</span\n                    >\n                    <button\n                      class=\"btn btn-sm btn-link btn-icon\"\n                      title=\"Add column\"\n                      (click)=\"addColumn($event)\"\n                      style=\"margin: 0;\"\n                    >\n                      <clr-icon shape=\"plus\"></clr-icon>\n                    </button>\n                  </clr-stack-content>\n                  <clr-stack-block\n                    *ngFor=\"let col of sectionInEdit['columns']; index as i\"\n                  >\n                    <clr-stack-label\n                      >Column {{ i + 1 }}\n                      <button\n                        class=\"btn btn-sm btn-link btn-icon\"\n                        (click)=\"deleteColumn(i)\"\n                      >\n                        <clr-icon shape=\"trash\"></clr-icon>\n                      </button>\n                    </clr-stack-label>\n                    <clr-stack-content>\n                      <input\n                        type=\"text\"\n                        [(ngModel)]=\"sectionInEdit['columns'][i]['label']\"\n                        class=\"clr-input\"\n                        placeholder=\"Label\"\n                      />\n                      <select\n                        [(ngModel)]=\"sectionInEdit['columns'][i]['type']\"\n                        (ngModelChange)=\"typeChanged(col, $event)\"\n                        class=\"clr-select\"\n                      >\n                        <option value=\"division-select\">Division Select</option>\n                        <option value=\"text\">Text</option>\n                        <option value=\"number\">Number</option>\n                        <option value=\"date-select\">Date</option>\n                        <option value=\"tag-select\">Tag Select</option>\n                      </select>\n                      <div\n                        class=\"clr-col\"\n                        *ngIf=\"isEqual(col['type'], 'tag-select')\"\n                      >\n                        <div class=\"clr-row\">\n                          <label class=\"clr-control-label\">Tags</label>\n                        </div>\n                        <clr-accordion>\n                          <clr-accordion-panel\n                            *ngFor=\"let tag of col['tags']; index as i\"\n                          >\n                            <clr-accordion-title\n                              >{{ tag[\"icon\"] }}\n                              {{ tag[\"label\"] }}\n                              <button\n                                class=\"btn btn-link btn-sm btn-icon\"\n                                (click)=\"deleteTag(col, i)\"\n                                style=\"margin: 0;\"\n                              >\n                                <clr-icon\n                                  shape=\"trash\"\n                                  class=\"is-danger\"\n                                ></clr-icon>\n                              </button>\n                            </clr-accordion-title>\n                            <clr-accordion-content\n                              *clrIfExpanded\n                              class=\"tagAccordion\"\n                            >\n                              <label class=\"clr-control-label\">Tag label</label>\n                              <input clrInput [(ngModel)]=\"tag['label']\" />\n                              <label class=\"clr-control-label\">Tag icon</label>\n                              <emoji-picker\n                                (emoji-click)=\"editTagEmoji(col, i, $event)\"\n                              ></emoji-picker>\n                            </clr-accordion-content>\n                          </clr-accordion-panel>\n                        </clr-accordion>\n                        <div class=\"clr-row\">\n                          <button\n                            class=\"btn btn-link btn-sm\"\n                            (click)=\"addTag(col, $event)\"\n                          >\n                            Add tag\n                          </button>\n                        </div>\n                      </div>\n                    </clr-stack-content>\n                  </clr-stack-block>\n                </clr-stack-block>\n                <clr-stack-block\n                  *ngIf=\"\n                    isSimpleInput(sectionInEdit) ||\n                    isSectionType(sectionInEdit, 'meta')\n                  \"\n                >\n                  <clr-stack-label>\n                    Inputs\n                    <clr-tooltip *ngIf=\"hasPrefill(sectionInEdit)\">\n                      <clr-icon\n                        clrTooltipTrigger\n                        shape=\"warning-standard\"\n                        class=\"is-warning is-solid\"\n                        size=\"16\"\n                      ></clr-icon>\n                      <clr-tooltip-content\n                        clrPosition=\"top-right\"\n                        clrSize=\"md\"\n                        *clrIfOpen\n                      >\n                        <span\n                          >Modifying this section might\n                          <b>clear existing prefill</b>.</span\n                        >\n                      </clr-tooltip-content>\n                    </clr-tooltip>\n                  </clr-stack-label>\n                  <clr-stack-content *ngIf=\"sectionInEdit\">\n                    {{ sectionInEdit[\"inputs\"].length }} inputs\n                    <button\n                      class=\"btn btn-sm btn-link btn-icon\"\n                      title=\"Add input\"\n                      (click)=\"addInput($event)\"\n                      style=\"margin: 0;\"\n                    >\n                      <clr-icon shape=\"plus\"></clr-icon>\n                    </button>\n                  </clr-stack-content>\n                  <clr-stack-block\n                    *ngFor=\"let input of sectionInEdit['inputs']; index as i\"\n                  >\n                    <clr-stack-label>\n                      Input {{ i + 1 }}\n                      <clr-dropdown>\n                        <button clrDropdownTrigger>\n                          <clr-icon\n                            shape=\"ellipsis-vertical\"\n                            size=\"16\"\n                          ></clr-icon>\n                        </button>\n                        <clr-dropdown-menu *clrIfOpen>\n                          <div\n                            clrDropdownItem\n                            (click)=\"deleteInArray(i, sectionInEdit['inputs'])\"\n                          >\n                            Delete input\n                          </div>\n                          <div\n                            clrDropdownItem\n                            *ngIf=\"i > 0\"\n                            (click)=\"\n                              moveInArray(i, i - 1, sectionInEdit['inputs'])\n                            \"\n                          >\n                            Move up\n                          </div>\n                          <div\n                            clrDropdownItem\n                            *ngIf=\"i < sectionInEdit['inputs'].length - 1\"\n                            (click)=\"\n                              moveInArray(i, i + 1, sectionInEdit['inputs'])\n                            \"\n                          >\n                            Move down\n                          </div>\n                        </clr-dropdown-menu>\n                      </clr-dropdown>\n                    </clr-stack-label>\n                    <clr-stack-content>\n                      <clr-input-container>\n                        <label>Label</label>\n                        <input clrInput [(ngModel)]=\"input['label']\" />\n                      </clr-input-container>\n                      <clr-select-container\n                        *ngIf=\"isSectionType(sectionInEdit, 'simple-input')\"\n                      >\n                        <label>Type</label>\n                        <select\n                          [(ngModel)]=\"input['type']\"\n                          (ngModelChange)=\"typeChanged(input, $event)\"\n                          clrSelect\n                        >\n                          <option value=\"division-select\"\n                            >Division Select</option\n                          >\n                          <option value=\"text\">Text</option>\n                          <option value=\"number\">Number</option>\n                          <option value=\"date-select\">Date</option>\n                          <option value=\"tag-select\">Tag Select</option>\n                          <option value=\"month-select\">Month</option>\n                          <option value=\"textarea\">Multiline text</option>\n                        </select>\n                        <div\n                          class=\"clr-col\"\n                          *ngIf=\"isEqual(input['type'], 'tag-select')\"\n                        >\n                          <div class=\"clr-row\">\n                            <label class=\"clr-control-label\">Tags</label>\n                          </div>\n                          <clr-accordion>\n                            <clr-accordion-panel\n                              *ngFor=\"let tag of input['tags']; index as i\"\n                            >\n                              <clr-accordion-title\n                                >{{ tag[\"icon\"] }}\n                                {{ tag[\"label\"] }}\n                                <button\n                                  class=\"btn btn-link btn-sm btn-icon\"\n                                  (click)=\"deleteTag(input, i)\"\n                                  style=\"margin: 0;\"\n                                >\n                                  <clr-icon\n                                    shape=\"trash\"\n                                    class=\"is-danger\"\n                                  ></clr-icon>\n                                </button>\n                              </clr-accordion-title>\n                              <clr-accordion-content\n                                *clrIfExpanded\n                                class=\"tagAccordion\"\n                              >\n                                <label class=\"clr-control-label\"\n                                  >Tag label</label\n                                >\n                                <input clrInput [(ngModel)]=\"tag['label']\" />\n                                <label class=\"clr-control-label\"\n                                  >Tag icon</label\n                                >\n                                <emoji-picker\n                                  (emoji-click)=\"editTagEmoji(input, i, $event)\"\n                                ></emoji-picker>\n                              </clr-accordion-content>\n                            </clr-accordion-panel>\n                          </clr-accordion>\n                          <div class=\"clr-row\">\n                            <button\n                              class=\"btn btn-link btn-sm\"\n                              (click)=\"addTag(input, $event)\"\n                            >\n                              Add tag\n                            </button>\n                          </div>\n                        </div>\n                      </clr-select-container>\n\n                      <clr-select-container\n                        *ngIf=\"isSectionType(sectionInEdit, 'meta')\"\n                      >\n                        <label>Link</label>\n                        <select\n                          [(ngModel)]=\"input['link']\"\n                          (ngModelChange)=\"linkChanged(input, $event)\"\n                          clrSelect\n                        >\n                          <option value=\"coverageDate\"\n                            >Report coverage date</option\n                          >\n                          <option value=\"additionalInfo\"\n                            >Additional info</option\n                          >\n                          <option value=\"title\">Report title</option>\n                          <option value=\"subject\">Report subject</option>\n                          <option value=\"tags\">Report tags</option>\n                        </select>\n                      </clr-select-container>\n                      <div\n                        class=\"clr-col\"\n                        *ngIf=\"isEqual(input['type'], 'tag-select')\"\n                      >\n                        <div class=\"clr-row\">\n                          <label class=\"clr-control-label\">Tags</label>\n                        </div>\n                        <clr-accordion>\n                          <clr-accordion-panel\n                            *ngFor=\"let tag of input['tags']; index as i\"\n                          >\n                            <clr-accordion-title\n                              >{{ tag[\"icon\"] }}\n                              {{ tag[\"label\"] }}\n                              <button\n                                class=\"btn btn-link btn-sm btn-icon\"\n                                (click)=\"deleteTag(input, i)\"\n                                style=\"margin: 0;\"\n                              >\n                                <clr-icon\n                                  shape=\"trash\"\n                                  class=\"is-danger\"\n                                ></clr-icon>\n                              </button>\n                            </clr-accordion-title>\n                            <clr-accordion-content\n                              *clrIfExpanded\n                              class=\"tagAccordion\"\n                            >\n                              <label class=\"clr-control-label\">Tag label</label>\n                              <input clrInput [(ngModel)]=\"tag['label']\" />\n                              <label class=\"clr-control-label\">Tag icon</label>\n                              <emoji-picker\n                                (emoji-click)=\"editTagEmoji(input, i, $event)\"\n                              ></emoji-picker>\n                            </clr-accordion-content>\n                          </clr-accordion-panel>\n                        </clr-accordion>\n                        <div class=\"clr-row\">\n                          <button\n                            class=\"btn btn-link btn-sm\"\n                            (click)=\"addTag(input, $event)\"\n                          >\n                            Add tag\n                          </button>\n                        </div>\n                      </div>\n                    </clr-stack-content>\n                    <!-- Show tag options if input is tag-select -->\n                  </clr-stack-block>\n                </clr-stack-block>\n              </clr-stack-view>\n            </clr-tab-content>\n          </clr-tab>\n          <clr-tab>\n            <button clrTabLink>Preview & prefill</button>\n            <clr-tab-content *clrIfActive=\"true\">\n              <p>\n                <clr-icon shape=\"help-info\"></clr-icon> Prefill is the default\n                information present in each section. You can use it to offer\n                hints on how a form should be filled.\n              </p>\n              <simple-input\n                *ngIf=\"\n                  isSimpleInput(sectionInEdit) ||\n                  isSectionType(sectionInEdit, 'meta')\n                \"\n                [interface]=\"sectionInEdit\"\n              >\n              </simple-input>\n\n              <datagrid-section\n                *ngIf=\"isDatagrid(sectionInEdit)\"\n                [interface]=\"sectionInEdit\"\n              >\n              </datagrid-section>\n              <!-- <table *ngIf=\"isDatagrid(sectionInEdit)\" class=\"table\">\n                <thead>\n                  <tr>\n                    <th>\n                      <p class=\"p8\">EDIT</p>\n                    </th>\n                    <th *ngFor=\"let col of sectionInEdit['columns']\">\n                      {{ col.label }}\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr *ngFor=\"let row of sectionInEdit['value']; index as i\">\n                    <td>\n                      <button\n                        class=\"btn btn-sm btn-link btn-icon\"\n                      >\n                        <clr-icon shape=\"trash\"></clr-icon>\n                      </button>\n                    </td>\n                    <td *ngFor=\"let col of row['row']; index as j\">\n                      <select\n                        *ngIf=\"isDatatype(j, 'division-select')\"\n                        [(ngModel)]=\"sectionInEdit['value'][i]['row'][j]\"\n                        class=\"clr-select\"\n                      >\n                        <option\n                          *ngFor=\"\n                            let division of (constants$ | async)['divisions']\n                          \"\n                          [value]=\"division['label']\"\n                          >{{ division[\"label\"] }}</option\n                        >\n                      </select>\n                      <input\n                        *ngIf=\"isDatatype(j, 'date-select')\"\n                        type=\"date\"\n                        style=\"margin: 0;\"\n                        clrDate\n                        name=\"demo\"\n                        size=\"20\"\n                        [(ngModel)]=\"sectionInEdit['value'][i]['row'][j]\"\n                      />\n                      <clr-checkbox-container\n                        *ngIf=\"isDatatype(j, 'tag-select')\"\n                        clrInline\n                      >\n                        <clr-checkbox-wrapper\n                          *ngFor=\"let tag of sectionInEdit['tags']\"\n                        >\n                          <input\n                            type=\"checkbox\"\n                            clrCheckbox\n                            [ngModel]=\"hasTag(i, j, tag)\"\n                            (ngModelChange)=\"toggleTag(i, j, $event, tag)\"\n                          />\n                          <label [title]=\"tag['label']\">{{\n                            tag[\"icon\"]\n                          }}</label>\n                        </clr-checkbox-wrapper>\n                      </clr-checkbox-container>\n                      <input\n                        *ngIf=\"isDatatype(j, 'text')\"\n                        type=\"text\"\n                        size=\"20\"\n                        [(ngModel)]=\"sectionInEdit['value'][i]['row'][j]\"\n                        class=\"clr-input\"\n                        placeholder=\"Label\"\n                      />\n                      <input\n                        *ngIf=\"isDatatype(j, 'number')\"\n                        type=\"number\"\n                        size=\"20\"\n                        [(ngModel)]=\"sectionInEdit['value'][i]['row'][j]\"\n                        class=\"clr-input\"\n                        placeholder=\"Label\"\n                      />\n                    </td>\n                  </tr>\n                </tbody>\n              </table> -->\n            </clr-tab-content>\n          </clr-tab>\n        </clr-tabs>\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn\" (click)=\"cancelEditSection()\">\n          Cancel\n        </button>\n        <button\n          class=\"btn btn-warning-outline\"\n          (click)=\"deleteSection(sectionInEdit)\"\n        >\n          Delete section\n        </button>\n        <button\n          type=\"button\"\n          class=\"btn btn-primary\"\n          (click)=\"finishEditSection()\"\n        >\n          Apply changes\n        </button>\n      </div>\n    </clr-modal>\n    <clr-modal [(clrModalOpen)]=\"editPageOpened\">\n      <h3 class=\"modal-title\">Page properties</h3>\n      <div class=\"modal-body\" style=\"overflow: auto;\">\n        <div class=\"clr-col-12\">\n          <div class=\"clr-row\">\n            <clr-input-container>\n              <label>Page title</label>\n              <input clrInput [(ngModel)]=\"currentPage.title\" />\n            </clr-input-container>\n          </div>\n          <div class=\"clr-row\" style=\"padding-top: 1rem;\">\n            <label class=\"clr-control-label\">Page order </label>\n            <button\n              class=\"btn btn-link btn-sm\"\n              title=\"Move up\"\n              (click)=\"movePageUp()\"\n              [disabled]=\"currentPage.index < 1\"\n              style=\"margin: 0;\"\n            >\n              <clr-icon shape=\"angle\" dir=\"up\"></clr-icon>\n            </button>\n            {{ currentPage.index + 1 }}/{{ _template.pages.length }}\n            <button\n              class=\"btn btn-link btn-sm\"\n              title=\"Move down\"\n              style=\"margin: 0;\"\n              (click)=\"movePageDown()\"\n              [disabled]=\"currentPage.index > _template.pages.length - 2\"\n            >\n              <clr-icon shape=\"angle\" dir=\"down\"></clr-icon>\n            </button>\n          </div>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <button\n          type=\"button\"\n          class=\"btn btn-danger\"\n          (click)=\"deletePage(currentPage.index)\"\n        >\n          Delete page\n        </button>\n        <button\n          type=\"button\"\n          class=\"btn btn-primary\"\n          (click)=\"finishEditPage()\"\n        >\n          Finish\n        </button>\n      </div>\n    </clr-modal>\n  </div>\n  <button\n    class=\"btn btn-primary builder-save-button\"\n    [disabled]=\"!templateValid\"\n    [title]=\"validMessage\"\n    (click)=\"openSaveTemplate()\"\n  >\n    <clr-icon shape=\"floppy\"></clr-icon> Save template\n  </button>\n  <clr-modal\n    [(clrModalOpen)]=\"saveTemplateOpen\"\n    *ngIf=\"saveTemplateOpen\"\n    [clrModalSize]=\"'lg'\"\n  >\n    <h3 class=\"modal-title\">Save template?</h3>\n    <div class=\"modal-body\" style=\"overflow-y: auto;\">\n      <b>Title: </b>{{ _template.templateID }} <br />\n      <span *ngIf=\"originalTemplateName\"\n        ><b>Original title: </b>{{ originalTemplateName }} <br\n      /></span>\n      <b>Page count: </b>{{ _template.pages.length }} <br />\n      <hr />\n\n      <div style=\"overflow-y: auto; overflow-x: hidden; height: 75%;\">\n        <b>Magic text (for nerds):</b>\n        <pre style=\"max-height: 400px; overflow-y: auto;\">{{\n          getMagicText()\n        }}</pre>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <button type=\"button\" class=\"btn\" (click)=\"cancelSaveTemplate()\">\n        Cancel\n      </button>\n      <button\n        type=\"button\"\n        class=\"btn btn-success\"\n        [clrLoading]=\"saveLoadingStatus\"\n        (click)=\"saveTemplate()\"\n      >\n        Save template\n      </button>\n    </div>\n  </clr-modal>\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-division-select',\n  templateUrl: './division-select.component.html',\n  styleUrls: ['./division-select.component.css'],\n})\nexport class DivisionSelectComponent implements OnInit {\n  @Input() label: string = 'Divisions';\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n","<p>division-select works!</p>\n","import {\r\n  FormGroup,\r\n  FormControl,\r\n  Validators,\r\n  NG_VALUE_ACCESSOR,\r\n  ControlValueAccessor,\r\n} from '@angular/forms';\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  forwardRef,\r\n  HostBinding,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'month-select',\r\n  templateUrl: './month-select.component.html',\r\n  styleUrls: ['./month-select.component.css'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MonthSelectComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class MonthSelectComponent implements OnInit, ControlValueAccessor {\r\n  @Input() label: string;\r\n  year: number = new Date().getFullYear();\r\n  monthIndex: number;\r\n  dateString: string; //ISO date string\r\n\r\n  formGroup: FormGroup;\r\n\r\n  onChange = (newDateString: string) => {};\r\n  onTouched: any = () => {};\r\n\r\n  set value(newDateString: string) {\r\n    this.dateString = newDateString;\r\n    this.onChange(newDateString);\r\n    this.onTouched(newDateString);\r\n  }\r\n\r\n  writeValue(date: string): void {\r\n    if (!date) {\r\n      date = new Date().toISOString();\r\n    }\r\n    this.dateString = date;\r\n    console.log(date);\r\n\r\n    this.year = new Date(date).getFullYear();\r\n    this.monthIndex = new Date(date).getMonth();\r\n    console.log(this._monthNames[this.monthIndex]);\r\n    this.formGroup.get('yearInput').setValue(this.year);\r\n    this.formGroup\r\n      .get('monthInput')\r\n      .setValue(this._monthNames[this.monthIndex]);\r\n  }\r\n\r\n  registerOnChange(fn: (newDateString: string) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    if (isDisabled) {\r\n      this.formGroup.disable();\r\n    } else this.formGroup.enable();\r\n  }\r\n\r\n  _monthNames: string[] = [\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December',\r\n  ];\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    this.formGroup = new FormGroup({\r\n      monthInput: new FormControl(),\r\n      yearInput: new FormControl(this.year),\r\n    });\r\n    console.log('Initial is ', this.monthIndex);\r\n    if (!this.monthIndex) {\r\n      this.dateString;\r\n    }\r\n    this.formGroup.valueChanges.subscribe((newValue) => {\r\n      if (\r\n        this.monthIndex !== this._monthNames.indexOf(newValue['monthInput'])\r\n      ) {\r\n        console.log(this._monthNames.indexOf(newValue['monthInput']));\r\n        let monthIndex = this._monthNames.indexOf(newValue['monthInput']);\r\n        if (monthIndex > -1)\r\n          this.monthIndex = this._monthNames.indexOf(newValue['monthInput']);\r\n      }\r\n\r\n      this.year = newValue['yearInput'];\r\n      let date = new Date();\r\n      date.setMonth(this.monthIndex);\r\n      date.setFullYear(this.year);\r\n      this.dateString = date.toISOString();\r\n      this.value = this.dateString;\r\n    });\r\n  }\r\n}\r\n","<form [formGroup]=\"formGroup\">\r\n  <label for=\"\" class=\"p4\">{{ label }}</label>\r\n  <div class=\"clr-row clr-align-items-start\" style=\"margin: 0;\">\r\n    <select clrSelect class=\"clr-col\" formControlName=\"monthInput\">\r\n      <option [value]=\"month\" *ngFor=\"let month of _monthNames\">\r\n        {{ month }}</option\r\n      >\r\n    </select>\r\n    <clr-input-container class=\"clr-col\">\r\n      <input\r\n        clrInput\r\n        style=\"margin-left: 0.5rem;\"\r\n        type=\"number\"\r\n        placeholder=\"Year\"\r\n        formControlName=\"yearInput\"\r\n      />\r\n      <clr-control-error>Does this year make sense?</clr-control-error>\r\n    </clr-input-container>\r\n  </div>\r\n</form>\r\n","import { auth } from 'firebase/app';\r\nimport { Router } from '@angular/router';\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\n\r\nimport {\r\n  FormGroup,\r\n  FormControl,\r\n  ValidatorFn,\r\n  AbstractControl,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { UserService } from 'src/app/services/user.service';\r\n\r\nfunction checkMatch(\r\n  control: AbstractControl\r\n): { [key: string]: boolean } | null {\r\n  let password1 = control.get('newPasswordInput').value;\r\n  let password2 = control.get('confirmPasswordInput').value;\r\n  if (password1 !== password2) {\r\n    return {\r\n      notMatching: true,\r\n    };\r\n  } else return null;\r\n}\r\n\r\nfunction checkEmail(\r\n  control: AbstractControl\r\n): { [key: string]: boolean } | null {\r\n  let email: string = control.get('emailInput').value;\r\n  let domain = email.split('@')[1];\r\n  if (!(domain === 'ebrpl.com' || domain === 'brla.gov')) {\r\n    return {\r\n      outsideEmail: true,\r\n    };\r\n  } else return null;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css'],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginGroup: FormGroup;\r\n  createAccountGroup: FormGroup;\r\n  forgotPasswordGroup: FormGroup;\r\n  currentScreen: string = 'login';\r\n  alert: string = null;\r\n  alertMessage: string = '';\r\n\r\n  constructor(public _Router: Router, public userv: UserService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loginGroup = new FormGroup({\r\n      emailInput: new FormControl('', Validators.required),\r\n      passwordInput: new FormControl('', Validators.required),\r\n    });\r\n    this.createAccountGroup = new FormGroup(\r\n      {\r\n        emailInput: new FormControl('', Validators.required),\r\n        newPasswordInput: new FormControl('', Validators.required),\r\n        confirmPasswordInput: new FormControl('', Validators.required),\r\n        branchSelect: new FormControl('Branch', Validators.required),\r\n      },\r\n      [checkMatch, checkEmail]\r\n    );\r\n    this.forgotPasswordGroup = new FormGroup({\r\n      emailInput: new FormControl('', Validators.required),\r\n    });\r\n  }\r\n\r\n  tryLogin() {\r\n    console.log('Logging in...');\r\n    let email = this.loginGroup.get('emailInput').value;\r\n    let password = this.loginGroup.get('passwordInput').value;\r\n    console.log(this.loginGroup.get('emailInput').value);\r\n    this.userv\r\n      .logIn(email, password)\r\n      .then(() => {\r\n        console.log('Login successful.');\r\n        this._Router.navigate(['']);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        this.showErrorAlert(\r\n          'Invalid username or password. Does this account exist?'\r\n        );\r\n      });\r\n  }\r\n\r\n  createAccount() {\r\n    let email = this.createAccountGroup.get('emailInput').value;\r\n    let newPassword = this.createAccountGroup.get('newPasswordInput').value;\r\n    let confirmPassword = this.createAccountGroup.get('confirmPasswordInput')\r\n      .value;\r\n    let branch = this.createAccountGroup.get('branchSelect').value;\r\n    if (!this.createAccountGroup.errors) {\r\n      console.log('Creating account');\r\n      this.hideAlert();\r\n      //pass a fresh User to createAccount, along with new password\r\n      this.userv\r\n        .createAccount(\r\n          {\r\n            email: email,\r\n            emailVerified: false,\r\n            branch: branch,\r\n            role: 'user',\r\n          },\r\n          newPassword\r\n        )\r\n        .then(() => {\r\n          auth().currentUser.sendEmailVerification();\r\n          this.showSuccessAlert(\r\n            'Account successfully created. Please check your email to finish up. Redirecting...'\r\n          );\r\n          setTimeout(() => {\r\n            this._Router.navigate(['']);\r\n          }, 5000);\r\n        })\r\n        .catch((error) => {\r\n          console.error('ERROR' + error);\r\n          this.showErrorAlert(error);\r\n          this.createAccountGroup.setErrors({ firebase: true });\r\n        });\r\n    } else if (this.createAccountGroup.getError('notMatching')) {\r\n      console.error('Passwords do not match');\r\n      this.showErrorAlert('Passwords do not match.');\r\n    } else if (this.createAccountGroup.getError('outsideEmail')) {\r\n      console.error('Employee email required.');\r\n      this.showErrorAlert('Please use your employee email.');\r\n    } else {\r\n      console.error(this.createAccountGroup.errors);\r\n    }\r\n  }\r\n\r\n  sendResetEmail() {\r\n    auth()\r\n      .sendPasswordResetEmail(this.forgotPasswordGroup.get('emailInput').value)\r\n      .catch((error) => {\r\n        console.log(error.code);\r\n      });\r\n    this.showSuccessAlert(\r\n      'If that account exists, a reset email has been sent.'\r\n    );\r\n    this.showLogin();\r\n  }\r\n\r\n  showErrorAlert(error: string) {\r\n    this.alert = 'danger';\r\n    this.alertMessage = error;\r\n  }\r\n\r\n  showSuccessAlert(message: string) {\r\n    this.alert = 'success';\r\n    this.alertMessage = message;\r\n  }\r\n\r\n  hideAlert() {\r\n    this.alert = null;\r\n    this.alertMessage = '';\r\n  }\r\n\r\n  showSignup() {\r\n    this.currentScreen = 'signup';\r\n    this.hideAlert();\r\n  }\r\n\r\n  showLogin() {\r\n    this.currentScreen = 'login';\r\n    //this.hideAlert();\r\n  }\r\n  showReset() {\r\n    this.currentScreen = 'reset';\r\n    this.hideAlert();\r\n  }\r\n\r\n  get alertClass() {\r\n    if (this.alert === 'danger') {\r\n      return 'alert alert-danger';\r\n    } else if (this.alert === 'warning') {\r\n      return 'alert alert-warning';\r\n    } else if (this.alert === 'info') {\r\n      return 'alert alert-info';\r\n    } else if (this.alert === 'success') {\r\n      return 'alert alert-success';\r\n    } else return null;\r\n  }\r\n\r\n  get loginVisible() {\r\n    return this.currentScreen === 'login';\r\n  }\r\n  get signupVisible() {\r\n    return this.currentScreen === 'signup';\r\n  }\r\n  get resetVisible() {\r\n    return this.currentScreen === 'reset';\r\n  }\r\n\r\n  getConstant(constantName: string) {\r\n    return [\r\n      'Main Library',\r\n      'Baker Branch',\r\n      'Bluebonnet Regional Branch',\r\n      'Carver Branch',\r\n      'Central Branch',\r\n      'Delmont Gardens Branch',\r\n      'Eden Park Branch',\r\n      'Fairwood Branch',\r\n      'Greenwell Springs Rd. Regional Branch',\r\n      'Jones Creek Regional Branch',\r\n      'Pride-Chaneyville Branch',\r\n      'River Center Branch',\r\n      'Scotlandville Branch',\r\n      'Zachary Branch',\r\n    ];\r\n  }\r\n}\r\n","<div class=\"clr-row clr-justify-content-center\" style=\"width: 95vw;\">\r\n  <div class=\"clr-col clr-offset-md-4 login-wrapper\">\r\n    <form class=\"login\" [formGroup]=\"loginGroup\" *ngIf=\"loginVisible\">\r\n      <section class=\"title\">\r\n        <h3 class=\"welcome\">Welcome to the</h3>\r\n        Monthly Program Statistics tool\r\n        <h5 class=\"hint\" *ngIf=\"!resetVisible\">\r\n          Use your staff email to sign in, or create a new account now\r\n        </h5>\r\n      </section>\r\n      <div class=\"login-group\">\r\n        <clr-input-container>\r\n          <label class=\"clr-sr-only\">Staff email</label>\r\n          <input\r\n            type=\"email\"\r\n            formControlName=\"emailInput\"\r\n            clrInput\r\n            placeholder=\"Staff email\"\r\n          />\r\n        </clr-input-container>\r\n        <clr-password-container *ngIf=\"loginVisible\">\r\n          <label class=\"clr-sr-only\">Password</label>\r\n          <input\r\n            type=\"password\"\r\n            formControlName=\"passwordInput\"\r\n            clrPassword\r\n            placeholder=\"Password\"\r\n            autocomplete=\"current-password\"\r\n          />\r\n          <clr-control-helper\r\n            >Forgot your password?\r\n            <a (click)=\"showReset()\">Reset it here.</a></clr-control-helper\r\n          >\r\n        </clr-password-container>\r\n        <div *ngIf=\"alert\" [className]=\"alertClass\" role=\"alert\">\r\n          <div class=\"alert-items\">\r\n            <div class=\"alert-item static\">\r\n              <span class=\"alert-text\">\r\n                {{ alertMessage }}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button\r\n          (click)=\"tryLogin()\"\r\n          *ngIf=\"loginVisible\"\r\n          class=\"btn btn-primary\"\r\n          [disabled]=\"loginGroup.invalid\"\r\n        >\r\n          LOG IN\r\n        </button>\r\n        <a (click)=\"showSignup()\" *ngIf=\"loginVisible\" class=\"signup\"\r\n          >Or create a new account</a\r\n        >\r\n      </div>\r\n    </form>\r\n    <form class=\"login\" [formGroup]=\"createAccountGroup\" *ngIf=\"signupVisible\">\r\n      <section class=\"title\">\r\n        <h3 class=\"welcome\">Welcome to the</h3>\r\n        Monthly Program Statistics tool\r\n        <h5 class=\"hint\">\r\n          Use your staff email to sign in, or create a new account now\r\n        </h5>\r\n      </section>\r\n      <div class=\"login-group\">\r\n        <clr-input-container>\r\n          <label class=\"clr-sr-only\">Staff email</label>\r\n          <input\r\n            type=\"email\"\r\n            formControlName=\"emailInput\"\r\n            clrInput\r\n            placeholder=\"Staff email\"\r\n          />\r\n        </clr-input-container>\r\n        <clr-select-container>\r\n          <label class=\"clr-sr-only\">Which branch do you work for?</label>\r\n          <select clrSelect name=\"type\" formControlName=\"branchSelect\">\r\n            <option\r\n              [value]=\"branch\"\r\n              *ngFor=\"let branch of getConstant('branches')\"\r\n              >{{ branch }}</option\r\n            >\r\n          </select>\r\n          <clr-control-helper>Which branch do you work for?</clr-control-helper>\r\n        </clr-select-container>\r\n        <clr-password-container>\r\n          <label class=\"clr-sr-only\">New password</label>\r\n          <input\r\n            type=\"password\"\r\n            formControlName=\"newPasswordInput\"\r\n            clrPassword\r\n            placeholder=\"New password\"\r\n            autocomplete=\"new-password\"\r\n          />\r\n        </clr-password-container>\r\n        <clr-password-container>\r\n          <label class=\"clr-sr-only\">Confirm password</label>\r\n          <input\r\n            type=\"password\"\r\n            formControlName=\"confirmPasswordInput\"\r\n            clrPassword\r\n            placeholder=\"Confirm password\"\r\n          />\r\n        </clr-password-container>\r\n        <div *ngIf=\"alert\" [className]=\"alertClass\" role=\"alert\">\r\n          <div class=\"alert-items\">\r\n            <div class=\"alert-item static\">\r\n              <span class=\"alert-text\">\r\n                {{ alertMessage }}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button\r\n          (click)=\"createAccount()\"\r\n          class=\"btn btn-primary\"\r\n          [disabled]=\"createAccountGroup.invalid\"\r\n        >\r\n          Create account\r\n        </button>\r\n        <a (click)=\"showLogin()\" *ngIf=\"signupVisible\" class=\"signup\"\r\n          >Already have an account? Log in</a\r\n        >\r\n      </div>\r\n    </form>\r\n    <form class=\"login\" [formGroup]=\"forgotPasswordGroup\" *ngIf=\"resetVisible\">\r\n      <section class=\"title\">\r\n        <h3 class=\"welcome\">Welcome to the</h3>\r\n        Monthly Program Statistics tool\r\n        <h5 class=\"hint\">\r\n          <hr />\r\n          Reset your password\r\n        </h5>\r\n      </section>\r\n      <div class=\"login-group\">\r\n        <clr-input-container>\r\n          <label class=\"clr-sr-only\">Staff email</label>\r\n          <input\r\n            type=\"email\"\r\n            formControlName=\"emailInput\"\r\n            clrInput\r\n            placeholder=\"Staff email\"\r\n          />\r\n        </clr-input-container>\r\n        <div\r\n          *ngIf=\"!forgotPasswordGroup.valid\"\r\n          [className]=\"alertClass\"\r\n          role=\"alert\"\r\n        >\r\n          <div class=\"alert-items\">\r\n            <div class=\"alert-item static\">\r\n              <span class=\"alert-text\">\r\n                {{ alertMessage }}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button\r\n          (click)=\"sendResetEmail()\"\r\n          *ngIf=\"resetVisible\"\r\n          class=\"btn btn-primary\"\r\n          [disabled]=\"forgotPasswordGroup.invalid\"\r\n        >\r\n          Send reset email\r\n        </button>\r\n        <a (click)=\"showLogin()\" class=\"signup\">Back to login</a>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n","import { Router, ActivatedRoute } from '@angular/router';\r\nimport { Report } from 'src/app/interfaces/report';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\nimport { auth } from 'firebase/app';\r\nimport { ReportService } from 'src/app/services/report.service';\r\nimport { UserService } from 'src/app/services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  templateUrl: './navbar.component.html',\r\n  styleUrls: ['./navbar.component.css'],\r\n})\r\nexport class NavbarComponent implements OnInit {\r\n  report: Report;\r\n  provider;\r\n  vw = 0;\r\n  offline: boolean;\r\n\r\n  constructor(\r\n    private _ReportService: ReportService,\r\n    public auth: AngularFireAuth,\r\n    public _Router: Router,\r\n    public userv: UserService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this._ReportService.getReportObservable().subscribe((observer) => {\r\n      this.report = observer;\r\n    });\r\n    this.vw = Math.max(\r\n      document.documentElement.clientWidth || 0,\r\n      window.innerWidth || 0\r\n    );\r\n    window.onresize = (event) => {\r\n      this.vw = Math.max(\r\n        document.documentElement.clientWidth || 0,\r\n        window.innerWidth || 0\r\n      );\r\n    };\r\n    onoffline = () => {\r\n      this.offline = !navigator.onLine;\r\n    };\r\n    ononline = () => {\r\n      this.offline = !navigator.onLine;\r\n    };\r\n  }\r\n\r\n  login() {\r\n    this._Router.navigate(['login']);\r\n  }\r\n\r\n  logout() {\r\n    this.userv.logOut();\r\n    this._Router.navigate(['login']);\r\n  }\r\n\r\n  get userShape(): string {\r\n    if (\r\n      this.userv.getUserSnapshot() &&\r\n      this.userv.getUserSnapshot().role === 'admin'\r\n    ) {\r\n      return 'administrator';\r\n    } else return 'user';\r\n  }\r\n\r\n  get isAdmin() {\r\n    let user = this.userv.getUserSnapshot();\r\n    if (user && user.role === 'admin') {\r\n      return true;\r\n    } else return false;\r\n  }\r\n}\r\n","<clr-alert\n  *ngIf=\"offline\"\n  [clrAlertType]=\"'warning'\"\n  [clrAlertAppLevel]=\"true\"\n  [clrAlertClosable]=\"false\"\n>\n  <clr-alert-item>\n    <span class=\"alert-text\">\n      It looks like you aren't connected to the internet.\n    </span>\n    <!-- <div class=\"alert-actions\">\n          <button class=\"btn alert-action\">Fix</button>\n      </div> -->\n  </clr-alert-item>\n</clr-alert>\n<header class=\"header header-7\">\n  <div class=\"branding app-title\" style=\"z-index: 1000;\">\n    <a routerLink=\"\" class=\"nav-link\">\n      <img src=\"assets/logo.svg\" *ngIf=\"vw > 600\" />\n      <span class=\"title\"\n        >Monthly Program Statistics\n        <span class=\"badge badge-light-blue\" *ngIf=\"isAdmin\">Admin</span></span\n      >\n    </a>\n  </div>\n  <div class=\"reportTitle\" *ngIf=\"report\">\n    <p class=\"titleText\" *ngIf=\"report.coverageDate\">\n      {{ report.templateID }}: {{ report.coverageDate | date: \"MMMM \t’yy\" }}\n    </p>\n  </div>\n  <div class=\"header-actions navbar-links\" *ngIf=\"!offline\">\n    <clr-dropdown *ngIf=\"auth.user | async as user; else logIn\">\n      <button\n        class=\"nav-text\"\n        clrDropdownTrigger\n        aria-label=\"open user profile\"\n      >\n        <clr-icon [attr.shape]=\"userShape\"></clr-icon>\n        <span *ngIf=\"vw > 769\">{{ user.email }}</span>\n      </button>\n      <clr-dropdown-menu *clrIfOpen clrPosition=\"bottom-right\">\n        <a [routerLink]=\"['preferences']\" clrDropdownItem>Preferences</a>\n        <a (click)=\"logout()\" clrDropdownItem>Log out</a>\n      </clr-dropdown-menu>\n    </clr-dropdown>\n    <ng-template #logIn>\n      <a class=\"nav-link nav-text\" (click)=\"login()\">LOGIN</a>\n    </ng-template>\n  </div>\n</header>\n","import { Router } from '@angular/router';\nimport { ClrLoadingState } from '@clr/angular';\nimport { UserService } from 'src/app/services/user.service';\nimport { Observable } from 'rxjs';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { ConstantService } from './../../services/constant.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-preferences',\n  templateUrl: './preferences.component.html',\n  styleUrls: ['./preferences.component.css'],\n})\nexport class PreferencesComponent implements OnInit {\n  formGroup: FormGroup;\n  constants: Observable<Object>;\n  saveBtnState: ClrLoadingState = ClrLoadingState.DEFAULT;\n  constructor(\n    private _ConstantService: ConstantService,\n    private _UserService: UserService,\n    private _Router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.formGroup = new FormGroup({\n      branchSelect: new FormControl(''),\n    });\n    this.constants = this._ConstantService.constants;\n    this._UserService.getUserObservable().subscribe((user) => {\n      if (user) this.formGroup.get('branchSelect').setValue(user.branch);\n    });\n  }\n\n  saveChanges() {\n    this.saveBtnState = ClrLoadingState.LOADING;\n    this._UserService\n      .setBranch(this.formGroup.get('branchSelect').value)\n      .then(() => {\n        this.saveBtnState = ClrLoadingState.SUCCESS;\n        console.log(\n          '[Preferences Component] Changes saved. Redirecting to home.'\n        );\n        this._Router.navigate(['']);\n      })\n      .catch(() => {\n        this.saveBtnState = ClrLoadingState.ERROR;\n      });\n  }\n}\n","<div\n  class=\"clr-row clr-justify-content-center\"\n  style=\"width: 100vw; margin-left: 1rem;\"\n>\n  <div class=\"clr-col clr-col-md-6 clr-col-xl-6\">\n    <div class=\"clr-row clr-justify-content-between clr-align-items-end\">\n      <h1>User preferences</h1>\n    </div>\n    <div class=\"clr-row\">\n      <form clrForm [formGroup]=\"formGroup\">\n        <h3>Change your branch affiliation</h3>\n        <clr-select-container>\n          <label class=\"clr-sr-only\">Which branch do you work for?</label>\n          <select clrSelect name=\"type\" formControlName=\"branchSelect\">\n            <option\n              [value]=\"branch\"\n              *ngFor=\"let branch of (constants | async)?.branches\"\n              >{{ branch }}</option\n            >\n          </select>\n          <clr-control-helper>Which branch do you work for?</clr-control-helper>\n        </clr-select-container>\n      </form>\n    </div>\n    <div class=\"clr-row\" style=\"margin-top: 3rem;\">\n      <button\n        class=\"btn btn-primary\"\n        [clrLoading]=\"saveBtnState\"\n        (click)=\"saveChanges()\"\n      >\n        Save changes\n      </button>\n    </div>\n  </div>\n</div>\n","import { UserService } from 'src/app/services/user.service';\r\nimport {\r\n  SectionInterface,\r\n  DatagridInterface,\r\n  SimpleInputInterface,\r\n} from './../../interfaces/sections';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ReportService } from '../../services/report.service';\r\nimport { DatagridSection } from './../sections/datagrid-section/datagrid-section.component';\r\nimport { AbstractSection } from './../sections/abstract-section/abstract-section.component';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Page } from './../../interfaces/page';\r\n\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute, RouterModule, Router } from '@angular/router';\r\nimport { SimpleInputSection } from '../sections/simple-input/simple-input.component';\r\nimport { ClrTimelineStepState, ClrLoadingState } from '@clr/angular';\r\nimport { ThrowStmt } from '@angular/compiler';\r\nimport { Report } from 'src/app/interfaces/report';\r\nimport { report } from 'process';\r\nimport { columnStateFactory } from '@clr/angular/data/datagrid/providers/column-state.provider';\r\n\r\n@Component({\r\n  selector: 'app-report',\r\n  templateUrl: './report.component.html',\r\n  styleUrls: ['./report.component.css'],\r\n})\r\nexport class ReportComponent implements OnInit, OnDestroy {\r\n  report$: Observable<Report>;\r\n  page$: Observable<Page>;\r\n\r\n  urlPageNumber: number;\r\n\r\n  datagrids: DatagridInterface[] = [];\r\n  simpleInputs: SimpleInputInterface[] = [];\r\n  startPage: SimpleInputSection;\r\n\r\n  markCompleteControl = new FormControl();\r\n  submitButtonState: ClrLoadingState = ClrLoadingState.DEFAULT;\r\n  saveButtonState: ClrLoadingState = ClrLoadingState.DEFAULT;\r\n  saveSuccessful: boolean = false;\r\n  saveTime: number;\r\n\r\n  submitConfirmationVisible: boolean = false;\r\n\r\n  constructor(\r\n    private activeRoute: ActivatedRoute,\r\n    private _Router: Router,\r\n    public _ReportService: ReportService,\r\n    private _UserService: UserService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.report$ = this._ReportService.getReportObservable();\r\n    this.page$ = this._ReportService.getPageObservable();\r\n\r\n    this.activeRoute.paramMap.subscribe((params) => {\r\n      this.urlPageNumber = +params.get('page-number');\r\n      if (\r\n        this.urlPageNumber !== null &&\r\n        this.urlPageNumber !== undefined &&\r\n        this.urlPageNumber !== this.currentPageIndex &&\r\n        this._ReportService.report\r\n      ) {\r\n        this._ReportService.openPage(this.urlPageNumber);\r\n      }\r\n    });\r\n\r\n    this.markCompleteControl.valueChanges.subscribe((newState: boolean) => {\r\n      if (newState === true) {\r\n        this._ReportService.setPageStatus(this.currentPageIndex, 'complete');\r\n      } else {\r\n        this._ReportService.setPageStatus(this.currentPageIndex, 'incomplete');\r\n      }\r\n      this._ReportService.saveReportOnline();\r\n    });\r\n\r\n    this.report$.subscribe((report) => {\r\n      if (!report) {\r\n        let reportID = this.activeRoute.snapshot.paramMap.get('report-id');\r\n        let pageNumber = this.activeRoute.snapshot.paramMap.get('page-number');\r\n        this._ReportService.openReport(reportID, +pageNumber);\r\n      }\r\n    });\r\n    //if requested page isn't open, open it\r\n\r\n    this.page$.subscribe((page) => {\r\n      if (page) {\r\n        this.datagrids = [];\r\n        this.simpleInputs = [];\r\n        //process new sections\r\n        page.sections.forEach((section) => {\r\n          if (section['type'] == 'datagrid') {\r\n            this.datagrids.push(section as DatagridInterface);\r\n          } else if (\r\n            section['type'] === 'simple-input' ||\r\n            section['type'] === 'meta'\r\n          ) {\r\n            this.simpleInputs.push(section as SimpleInputInterface);\r\n          }\r\n        });\r\n        this.markCompleteControl.setValue(\r\n          this._ReportService.report.pageStatuses[page.index] === 'complete'\r\n            ? true\r\n            : false\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  getPageButtonClass(pageIndex: number) {\r\n    if (pageIndex == this.currentPageIndex) return 'btn btn-primary';\r\n    else return 'btn';\r\n  }\r\n  pageComplete(pageIndex: number): boolean {\r\n    if (!this._ReportService.report) return false;\r\n    return this._ReportService.report.pageStatuses[pageIndex] === 'complete'\r\n      ? true\r\n      : false;\r\n  }\r\n\r\n  isDatagrid(section: Object) {\r\n    if (!section || section['type'] !== 'datagrid') {\r\n      return false;\r\n    } else return true;\r\n  }\r\n\r\n  get reportFullyComplete() {\r\n    let fullyComplete = true;\r\n    if (this._ReportService.report) {\r\n      this._ReportService.report.pageStatuses.forEach((elem) => {\r\n        //if one page is incomplete, the whole report is too!\r\n        if (elem !== 'complete') {\r\n          fullyComplete = false;\r\n        }\r\n      });\r\n    }\r\n    return fullyComplete;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._ReportService.closeReport();\r\n  }\r\n\r\n  savePage() {\r\n    this.saveButtonState = ClrLoadingState.LOADING;\r\n\r\n    //save report properties if a meta section is present\r\n    this._ReportService.page.sections.forEach((section) => {\r\n      if (section['type'] === 'meta') {\r\n        this._ReportService.saveReportOnline();\r\n      }\r\n    });\r\n    this._ReportService\r\n      .savePageOnline()\r\n      .then(() => {\r\n        this.saveButtonState = ClrLoadingState.DEFAULT;\r\n        this.saveSuccessful = true;\r\n        this.saveTime = Date.now();\r\n        setTimeout(() => (this.saveSuccessful = false), 2500);\r\n      })\r\n      .catch(() => {\r\n        this.saveButtonState = ClrLoadingState.ERROR;\r\n      });\r\n  }\r\n\r\n  goToPage(pageNumber: number) {\r\n    //no point saving a page if it hasn't been edited\r\n    if (this.editable) this.savePage();\r\n    this._Router.navigate([\r\n      'report',\r\n      this._ReportService.report.id,\r\n      pageNumber,\r\n    ]);\r\n  }\r\n\r\n  confirmSubmitReport() {\r\n    this.submitConfirmationVisible = true;\r\n  }\r\n\r\n  cancelSubmitReport() {\r\n    this.submitConfirmationVisible = false;\r\n  }\r\n\r\n  submitReport() {\r\n    console.log('[R Comp] Submitting report...');\r\n    this.submitButtonState = ClrLoadingState.LOADING;\r\n    this._ReportService.submitReport().then(() => {\r\n      this.submitButtonState = ClrLoadingState.SUCCESS;\r\n      this._Router.navigate(['']);\r\n    });\r\n  }\r\n\r\n  get currentPageIndex() {\r\n    if (this._ReportService.page) {\r\n      return this._ReportService.page.index;\r\n    } else return null;\r\n  }\r\n\r\n  get currentSections() {\r\n    return this._ReportService.page.sections;\r\n  }\r\n\r\n  //return minutes since last save\r\n  get saveTimeElapsed(): string {\r\n    if (!this.saveTime) {\r\n      return null;\r\n    } else {\r\n      return (\r\n        ((Date.now() - this.saveTime) / (1000 * 60)).toFixed() +\r\n        ' min since save'\r\n      );\r\n    }\r\n  }\r\n\r\n  get saveStale(): boolean {\r\n    //if unsaved or ten minutes have passed\r\n    if (!this.saveTime || (Date.now() - this.saveTime) / (1000 * 60) > 10) {\r\n      return true;\r\n    } else return false;\r\n  }\r\n\r\n  setSection(section, eventData) {\r\n    this._ReportService.setSectionValue(\r\n      this.currentPageIndex,\r\n      section.order,\r\n      eventData\r\n    );\r\n    //sections interact with Report properties directly,\r\n    //but it's up to the ReportComponent to save the changes\r\n    //to the database afterwards.\r\n    if (section['meta']) {\r\n      this._ReportService.saveReportOnline();\r\n    }\r\n  }\r\n\r\n  get editable(): boolean {\r\n    //if the report's been submitted and the user isn't an admin,\r\n    //make the report uneditable\r\n    if (\r\n      this._ReportService.report &&\r\n      this._UserService.getUserSnapshot().role !== 'admin' &&\r\n      this._ReportService.report.completionStatus === 'complete'\r\n    ) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n  get adminSubmitted(): boolean {\r\n    if (\r\n      this._UserService.getUserSnapshot() &&\r\n      this._UserService.getUserSnapshot().role === 'admin' &&\r\n      this._ReportService.report &&\r\n      this._ReportService.report.completionStatus === 'complete'\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  duplicateCurrentReport() {\r\n    let report = this._ReportService.report;\r\n    console.log(report.id);\r\n    this._ReportService.duplicateReport(report.id).then(\r\n      (newID) => {\r\n        alert('Report successfully duplicated. Moving to new report...');\r\n        this._ReportService\r\n          .openReport(newID)\r\n          .then(() => {\r\n            this._Router.navigate(['report', newID, 0]);\r\n          })\r\n          .catch((reason) => {\r\n            console.error(\r\n              'Error opening new report with ID ' + newID + ': ' + reason\r\n            );\r\n          });\r\n      },\r\n      () => {\r\n        console.error('Error duplicating report ' + report.id);\r\n      }\r\n    );\r\n  }\r\n\r\n  get submitted(): boolean {\r\n    if (\r\n      this._ReportService.report &&\r\n      this._ReportService.report.completionStatus === 'complete'\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n","<div class=\"topDiv clr-col\">\r\n  <div\r\n    class=\"clr-row clr-justify-content-center\"\r\n    [class.block-clicks]=\"!editable\"\r\n  >\r\n    <div class=\"clr-col clr-col-lg-10 clr-col-xl-8 sectionCol\">\r\n      <clr-alert\r\n        [clrAlertClosable]=\"false\"\r\n        [clrAlertType]=\"'warning'\"\r\n        *ngIf=\"submitted\"\r\n        [clrAlertIcon]=\"'warning-standard'\"\r\n      >\r\n        <clr-alert-item>\r\n          <span class=\"alert-text\">\r\n            This report has been marked complete. You can still edit it, but\r\n            consider creating a duplicate instead.\r\n          </span>\r\n          <div class=\"alert-actions\">\r\n            <clr-dropdown>\r\n              <button class=\"dropdown-toggle\" clrDropdownTrigger>\r\n                Actions\r\n                <clr-icon shape=\"caret down\"></clr-icon>\r\n              </button>\r\n              <clr-dropdown-menu clrPosition=\"bottom-right\">\r\n                <a\r\n                  (click)=\"duplicateCurrentReport()\"\r\n                  class=\"dropdown-item\"\r\n                  clrDropdownItem\r\n                  >Duplicate this report</a\r\n                >\r\n              </clr-dropdown-menu>\r\n            </clr-dropdown>\r\n          </div>\r\n        </clr-alert-item>\r\n      </clr-alert>\r\n      <h1>\r\n        {{ (page$ | async)?.title }}\r\n      </h1>\r\n      <hr />\r\n      <div *ngFor=\"let section of currentSections\">\r\n        <datagrid-section\r\n          *ngIf=\"isDatagrid(section); else simpleInput\"\r\n          [interface]=\"section\"\r\n          (sectionChanged)=\"setSection(section, $event)\"\r\n        >\r\n        </datagrid-section>\r\n        <ng-template #simpleInput>\r\n          <simple-input\r\n            [interface]=\"section\"\r\n            (sectionChanged)=\"setSection(section, $event)\"\r\n          ></simple-input>\r\n        </ng-template>\r\n      </div>\r\n      <div class=\"clr-col-md-6 clr-offset-md-3 clr-align-self-end\">\r\n        <clr-icon shape=\"help-info\"></clr-icon\r\n        ><em>Try the buttons below to continue the report.</em>\r\n      </div>\r\n      <div style=\"height: 48px;\"></div>\r\n    </div>\r\n  </div>\r\n  <clr-modal [(clrModalOpen)]=\"submitConfirmationVisible\">\r\n    <h3 class=\"modal-title\">All finished?</h3>\r\n    <div class=\"modal-body\">\r\n      <clr-alert\r\n        *ngIf=\"!reportFullyComplete\"\r\n        [clrAlertType]=\"'warning'\"\r\n        [clrAlertClosable]=\"false\"\r\n      >\r\n        <clr-alert-item>\r\n          <span class=\"alert-text\">\r\n            Heads up: not all pages have been marked as complete.\r\n          </span>\r\n        </clr-alert-item>\r\n      </clr-alert>\r\n      <hr />\r\n      <b>Marking a report as complete</b> indicates that all data inside should\r\n      be considered final. You can still edit the report after it's been marked\r\n      complete.\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n      <button\r\n        type=\"button\"\r\n        class=\"btn btn-outline\"\r\n        (click)=\"cancelSubmitReport()\"\r\n      >\r\n        Cancel\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        class=\"btn btn-primary\"\r\n        (click)=\"submitReport()\"\r\n        [clrLoading]=\"submitButtonState\"\r\n      >\r\n        Mark as complete\r\n      </button>\r\n    </div>\r\n  </clr-modal>\r\n  <div\r\n    class=\"alert alert-success\"\r\n    *ngIf=\"saveSuccessful\"\r\n    role=\"alert\"\r\n    style=\"\r\n      position: fixed;\r\n      bottom: 54px;\r\n      left: 6px;\r\n      width: 10rem;\r\n      z-index: 1000;\r\n    \"\r\n  >\r\n    <div class=\"alert-items\">\r\n      <div class=\"alert-item static\">\r\n        <div class=\"alert-icon-wrapper\">\r\n          <clr-icon class=\"alert-icon\" shape=\"check-circle\"></clr-icon>\r\n        </div>\r\n        <span class=\"alert-text\">Page saved</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"stickybar clr-row\">\r\n    <div class=\"clr-col-8 clr-col-md-10\">\r\n      <div class=\"clr-row clr-justify-content-center clr-align-items-center\">\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn\"\r\n          [class.btn-primary]=\"saveStale\"\r\n          [class.btn-link]=\"!saveStale\"\r\n          aria-label=\"save page\"\r\n          [clrLoading]=\"saveButtonState\"\r\n          (click)=\"savePage()\"\r\n          title=\"Save current page\"\r\n          *ngIf=\"editable\"\r\n        >\r\n          <clr-icon shape=\"floppy\" [class.has-alert]=\"saveStale\"></clr-icon>\r\n          {{ saveTimeElapsed }}\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn btn-icon btn-link\"\r\n          aria-label=\"previous page\"\r\n          [disabled]=\"currentPageIndex < 1\"\r\n          (click)=\"goToPage(currentPageIndex - 1)\"\r\n        >\r\n          <clr-icon shape=\"angle\" dir=\"left\"></clr-icon>\r\n        </button>\r\n        <clr-button-group *ngIf=\"(report$ | async)?.id\">\r\n          <clr-button\r\n            [class]=\"getPageButtonClass(i)\"\r\n            *ngFor=\"let status of (report$ | async)?.pageStatuses; index as i\"\r\n            (click)=\"goToPage(i)\"\r\n          >\r\n            <clr-icon\r\n              shape=\"home\"\r\n              *ngIf=\"i < 1; else showPageNumber\"\r\n            ></clr-icon>\r\n            <ng-template #showPageNumber>\r\n              {{ i }}\r\n            </ng-template>\r\n            <clr-icon\r\n              shape=\"check\"\r\n              *ngIf=\"pageComplete(i)\"\r\n              title=\"Marked complete\"\r\n            ></clr-icon\r\n          ></clr-button>\r\n        </clr-button-group>\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn btn-icon btn-link\"\r\n          aria-label=\"next page\"\r\n          [disabled]=\"currentPageIndex > (report$ | async)?.pageCount - 2\"\r\n          (click)=\"goToPage(currentPageIndex + 1)\"\r\n        >\r\n          <clr-icon shape=\"angle\" dir=\"right\"></clr-icon>\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn\"\r\n          aria-label=\"next page\"\r\n          (click)=\"confirmSubmitReport()\"\r\n          [class.btn-success]=\"reportFullyComplete\"\r\n          [clrLoading]=\"submitButtonState\"\r\n          *ngIf=\"editable\"\r\n        >\r\n          Mark complete<clr-icon shape=\"step-forward-2\"></clr-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div class=\"clr-col-4 clr-col-md-2\" *ngIf=\"editable\">\r\n      <clr-toggle-container #markCompleteToggle>\r\n        <label class=\"p6\" style=\"margin-top: 0.3rem;\">Mark this page:</label>\r\n        <clr-toggle-wrapper>\r\n          <input\r\n            type=\"checkbox\"\r\n            clrToggle\r\n            value=\"option1\"\r\n            name=\"options\"\r\n            [formControl]=\"markCompleteControl\"\r\n          />\r\n          <label *ngIf=\"pageComplete(currentPageIndex); else incompleteLabel\"\r\n            >Complete</label\r\n          >\r\n          <ng-template #incompleteLabel>\r\n            <label>Incomplete</label>\r\n          </ng-template>\r\n        </clr-toggle-wrapper>\r\n      </clr-toggle-container>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { SectionInterface } from './../../../interfaces/sections';\nimport {\n  Component,\n  OnInit,\n  Inject,\n  Input,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  ViewRef,\n} from '@angular/core';\nimport { FormArray } from '@angular/forms';\n\n@Component({\n  selector: 'abstract-section',\n  templateUrl: './abstract-section.component.html',\n  styleUrls: ['./abstract-section.component.css'],\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class AbstractSection implements OnInit {\n  @Input() public title: string = 'error';\n  @Input() public subtitle: string = null;\n  @Input() public data: any = null;\n  @Input() public interface: SectionInterface;\n  @Input() public constants: Object = {};\n  @Input() public order: number;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  checkTitle(): boolean {\n    if (this.title == 'Regular programs') return true;\n    else return false;\n  }\n\n  getTitle(): string {\n    return this.title;\n  }\n\n  isType(obj: Object, type: string) {\n    if (obj['type'] == type) {\n      return true;\n    } else false;\n  }\n\n  getCheckboxControl(\n    arrayIndex: number,\n    subarrayIndex: number,\n    array: FormArray\n  ) {\n    if (!array || !array.controls) {\n      console.error(\n        '[Abstract Section] Form array is empty. Has it been built?'\n      );\n      return [];\n    }\n    let checkboxArray = array.controls[arrayIndex] as FormArray;\n    return checkboxArray.controls[subarrayIndex];\n  }\n}\n","<h2>\n  {{ title }}\n</h2>\n<h6 class=\"subtitle\">{{ subtitle }}</h6>\n","import { ConstantService } from './../../../services/constant.service';\r\nimport { TemplateService } from './../../../services/template.service';\r\nimport { DatagridInterface } from './../../../interfaces/sections';\r\nimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { AbstractSection } from '../abstract-section/abstract-section.component';\r\nimport { __makeTemplateObject } from 'tslib';\r\nimport {\r\n  FormControl,\r\n  FormArray,\r\n  FormBuilder,\r\n  FormGroup,\r\n  AbstractControl,\r\n  Form,\r\n  Validators,\r\n} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'datagrid-section',\r\n  templateUrl: './datagrid-section.component.html',\r\n  styleUrls: ['./datagrid-section.component.css'],\r\n})\r\nexport class DatagridSection extends AbstractSection implements OnInit {\r\n  formArray = new FormArray([]);\r\n  formGroup: FormGroup;\r\n  formLabels: string[] = [];\r\n\r\n  @Output() sectionChanged = new EventEmitter<Object>();\r\n  @Input() interface: DatagridInterface;\r\n\r\n  addModalOpened: boolean = false;\r\n  editModalOpened: boolean = false;\r\n  showItemAddConfirmation: boolean = false;\r\n  selectedRow: number;\r\n\r\n  constants: Object;\r\n\r\n  constructor(public constantService: ConstantService) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.constantService.constants.subscribe((obj) => {\r\n      this.constants = obj;\r\n    });\r\n    if (!this.interface.value) {\r\n      this.interface.value = [];\r\n      console.warn('No value supplied for datagrid ' + this.interface.title);\r\n    }\r\n    this.formGroup = new FormGroup({\r\n      array: this.formArray,\r\n    });\r\n  }\r\n\r\n  hasTag(tagArray: Object[], tagObj) {\r\n    let tagLabels: string[] = [];\r\n    tagArray.forEach((tag) => {\r\n      tagLabels.push(tag['label']);\r\n    });\r\n    return tagLabels.includes(tagObj['label']);\r\n  }\r\n\r\n  convertISOtoTraditional(isoString: string) {\r\n    if (!isoString) {\r\n      return null;\r\n    }\r\n    let date = new Date(isoString);\r\n    let year = date.getFullYear();\r\n    let month = (date.getMonth() + 1).toString();\r\n    let dt = date.getDate().toString();\r\n\r\n    if (date.getDate() < 10) {\r\n      dt = '0' + dt.toString();\r\n    }\r\n    if (date.getMonth() < 10) {\r\n      month = '0' + month;\r\n    }\r\n    let result = month + '/' + dt + '/' + year;\r\n    console.log('Converting: ' + isoString + ' to ' + result);\r\n    return result;\r\n  }\r\n\r\n  convertTraditionalToISO(inputString: string) {\r\n    if (!inputString) {\r\n      return null;\r\n    }\r\n    let stringPieces = inputString.split('/');\r\n    if (stringPieces.length !== 3) {\r\n      console.warn('Invalid date: ' + inputString);\r\n      return null;\r\n    }\r\n    let monthNum: number = +stringPieces[0] - 1;\r\n    let dateNum: number = +stringPieces[1];\r\n    let yearNum: number = +stringPieces[2];\r\n    let date = new Date();\r\n    date.setMonth(monthNum);\r\n    date.setDate(dateNum);\r\n    date.setFullYear(yearNum);\r\n    let result = date.toISOString();\r\n    console.log('Converting: ' + inputString + ' to ' + result);\r\n    return result;\r\n  }\r\n\r\n  buildFormFromInterface(editData?: Object[]) {\r\n    console.log(editData);\r\n    let cols = this.interface.columns;\r\n    this.formArray = new FormArray([]);\r\n    this.formLabels = [];\r\n    if (cols) {\r\n      cols.forEach((column, colIndex) => {\r\n        //push a form control  and label for each column in the datagrid\r\n        this.formLabels.push(column.label);\r\n        //if the column is a tag-select, push a FormArray\r\n        if (column.type === 'tag-select') {\r\n          let tagArray = new FormArray([]);\r\n          if (column.tags) {\r\n            //push a checkbox for each tag\r\n            column.tags.forEach((tag, tagIndex) => {\r\n              let tagControl = new FormControl(false);\r\n              //initalize the checkboxes\r\n              if (\r\n                editData &&\r\n                editData[colIndex] &&\r\n                editData[colIndex]['tags']\r\n              ) {\r\n                tagControl.setValue(\r\n                  this.hasTag(editData[colIndex]['tags'], tag)\r\n                );\r\n                console.log(tag, this.hasTag(column['tags'], tag));\r\n              }\r\n              tagArray.push(tagControl);\r\n            });\r\n            console.log(tagArray.value);\r\n            this.formArray.push(tagArray);\r\n          }\r\n        } else {\r\n          if (editData && editData[colIndex]) {\r\n            console.log('Pushing ' + editData[colIndex]);\r\n            if (column.type === 'date-select') {\r\n              this.formArray.push(\r\n                new FormControl(\r\n                  this.convertISOtoTraditional(editData[colIndex] as string)\r\n                )\r\n              );\r\n            } else {\r\n              this.formArray.push(new FormControl(editData[colIndex]));\r\n            }\r\n          } else {\r\n            this.formArray.push(new FormControl());\r\n          }\r\n        }\r\n      });\r\n      console.log(this.formArray.value);\r\n    } else {\r\n      // just keep the formArray empty if no columns supplied.\r\n      console.warn('[Datagrid] Cannot build form. No columns could be found.');\r\n      return;\r\n    }\r\n\r\n    // let cols = (this.interface as DatagridInterface).columns;\r\n    // this.formArray.clear();\r\n    // if (!cols) {\r\n    //   console.error(this.interface);\r\n    //   console.error(\r\n    //     'No column values were supplied to ' + this.interface.title\r\n    //   );\r\n    //   return;\r\n    // }\r\n    // cols.forEach((column) => {\r\n    //   this.formLabels.push(column['label']);\r\n    //   if (column['type'] === 'tag-select') {\r\n    //     let checkboxArray = new FormArray([]);\r\n\r\n    //     //check if column has attached 'tags' property\r\n    //     if (column['tags']) {\r\n    //       column['tags'].forEach((tag) => {\r\n    //         checkboxArray.push(new FormControl());\r\n    //       });\r\n    //     }\r\n\r\n    //     this.formArray.push(checkboxArray);\r\n    //   } else {\r\n    //     this.formArray.push(new FormControl(''));\r\n    //   }\r\n    // });\r\n  }\r\n\r\n  addRowFromFormArray() {\r\n    let row = [];\r\n    (this.interface as DatagridInterface).columns.forEach((col, index) => {\r\n      if (col['type'] === 'tag-select') {\r\n        let tags: Object[] = [];\r\n        col.tags.forEach((tag, j) => {\r\n          if ((this.formArray.at(index) as FormArray).at(j).value === true)\r\n            tags.push(tag);\r\n        });\r\n        row.push({ tags: tags });\r\n      } else if (col.type === 'date-select') {\r\n        row.push(this.convertTraditionalToISO(this.formArray.at(index).value));\r\n      } else {\r\n        row.push(this.formArray.at(index).value);\r\n      }\r\n    });\r\n    console.log(this.interface);\r\n    this.interface.value.push({ row: row });\r\n    this.sectionChanged.emit(this.interface);\r\n  }\r\n\r\n  deleteRow(index: number) {\r\n    (this.interface.value as Array<any>).splice(index, 1);\r\n    this.sectionChanged.emit(this.interface);\r\n  }\r\n\r\n  finishAddModal() {\r\n    this.addModalOpened = false;\r\n    this.addRowFromFormArray();\r\n    this.formArray.reset();\r\n  }\r\n\r\n  openEditModal(rowIndex: number) {\r\n    this.selectedRow = rowIndex;\r\n    let editData = this.interface.value[rowIndex];\r\n    this.buildFormFromInterface(editData['row']);\r\n    this.editModalOpened = true;\r\n  }\r\n\r\n  // convertToFormValues(dataRow): any[] {\r\n  //   let formVals: any[] = [];\r\n  //   //check if any column contains tags\r\n  //   dataRow.row.forEach((col, index) => {\r\n  //     if (\r\n  //       (this.interface as DatagridInterface).columns[index]['type'] ===\r\n  //       'tag-select'\r\n  //     ) {\r\n  //       let colTags: Object[] = [];\r\n  //       if (this.interface['columns'][index]['tags']) {\r\n  //         let colTags: Object[] = this.interface['columns'][index]['tags'];\r\n  //       }\r\n\r\n  //       let rowTags: Object[] = col.tags;\r\n  //       let tagVals: boolean[] = [];\r\n  //       let templateLabels: string[] = [];\r\n  //       colTags.forEach((tag: Object) => {\r\n  //         templateLabels.push(tag['label']);\r\n  //       });\r\n  //       let rowLabels: string[] = [];\r\n  //       rowTags.forEach((tag: Object) => {\r\n  //         rowLabels.push(tag['label']);\r\n  //       });\r\n  //       templateLabels.forEach((templateLabel) => {\r\n  //         if (rowLabels.includes(templateLabel)) {\r\n  //           tagVals.push(true);\r\n  //         } else tagVals.push(false);\r\n  //       });\r\n  //       formVals.push(tagVals);\r\n  //     } else {\r\n  //       formVals.push(col);\r\n  //     }\r\n  //   });\r\n  //   console.log(formVals);\r\n  //   return formVals;\r\n  // }\r\n\r\n  finishEdits() {\r\n    this.editModalOpened = false;\r\n    this.editRow(this.selectedRow);\r\n    this.formArray.reset();\r\n  }\r\n  editRow(rowIndex: number) {\r\n    let row = [];\r\n    (this.interface as DatagridInterface).columns.forEach((col, index) => {\r\n      if (col['type'] === 'tag-select') {\r\n        let tags: Object[] = [];\r\n        col.tags.forEach((tag, j) => {\r\n          if ((this.formArray.at(index) as FormArray).at(j).value === true)\r\n            tags.push(tag);\r\n        });\r\n        row.push({ tags: tags });\r\n      } else if (col.type === 'date-select') {\r\n        row.push(this.convertTraditionalToISO(this.formArray.at(index).value));\r\n      } else {\r\n        row.push(this.formArray.at(index).value);\r\n      }\r\n    });\r\n    console.log('Finished edits: ' + row);\r\n    this.interface.value[rowIndex] = { row: row };\r\n    this.sectionChanged.emit(this.interface);\r\n  }\r\n\r\n  isDate(colIndex) {\r\n    let type = this.interface.columns[colIndex].type;\r\n    if (type === 'date-select' || type === 'month-select') {\r\n      return true;\r\n    } else return false;\r\n  }\r\n\r\n  openAddModal() {\r\n    this.buildFormFromInterface();\r\n    this.addModalOpened = true;\r\n  }\r\n\r\n  addAnother() {\r\n    this.addRowFromFormArray();\r\n    this.buildFormFromInterface();\r\n    console.log(this.interface.value);\r\n\r\n    //show a confirmation banner, then hide after 3 seconds\r\n    this.showItemAddConfirmation = true;\r\n    setTimeout(() => {\r\n      this.showItemAddConfirmation = false;\r\n    }, 3000);\r\n  }\r\n\r\n  addModalCancel() {\r\n    this.addModalOpened = false;\r\n    this.formArray.reset();\r\n  }\r\n  editModalCancel() {\r\n    this.editModalOpened = false;\r\n    this.formArray.reset();\r\n  }\r\n\r\n  isTagObj(obj) {\r\n    if (obj !== null && obj !== undefined && obj['tags']) return true;\r\n    else return false;\r\n  }\r\n\r\n  checkArrayValidity() {\r\n    this.formArray.controls.forEach((control) => {\r\n      console.log(control.value + ' | ' + control.status);\r\n    });\r\n    console.log(this.formArray.status);\r\n    console.log(this.formArray.valid);\r\n  }\r\n}\r\n","<h1>{{ interface.title }}</h1>\r\n<h5 class=\"subtitle\" *ngIf=\"interface.subtitle\">{{ interface.subtitle }}</h5>\r\n<clr-datagrid>\r\n  <clr-dg-placeholder\r\n    >Nothing to see here. Try adding more content.</clr-dg-placeholder\r\n  >\r\n  <clr-dg-column *clrDgItems=\"let column of interface.columns\">{{\r\n    column.label\r\n  }}</clr-dg-column>\r\n  <clr-dg-row *ngFor=\"let row of interface.value; index as i\">\r\n    <clr-dg-action-overflow>\r\n      <button class=\"action-item\" (click)=\"openEditModal(i)\">Edit</button>\r\n      <button class=\"action-item\" (click)=\"deleteRow(i)\">Delete</button>\r\n    </clr-dg-action-overflow>\r\n    <clr-dg-cell *ngFor=\"let cell of row.row; index as i\">\r\n      <span *ngIf=\"!isTagObj(cell); else tagRenderer\">\r\n        <span *ngIf=\"isDate(i); else plainCell\">{{\r\n          cell | date: \"MM/dd/yyyy\"\r\n        }}</span>\r\n        <ng-template #plainCell>\r\n          {{ cell }}\r\n        </ng-template>\r\n      </span>\r\n      <ng-template #tagRenderer>\r\n        <span *ngFor=\"let tag of cell.tags\">\r\n          <span title=\"{{ tag.label }}\">{{ tag.icon }}</span>\r\n        </span>\r\n      </ng-template>\r\n    </clr-dg-cell>\r\n  </clr-dg-row>\r\n  <clr-dg-footer>\r\n    <div class=\"btn-group btn-link btn-sm\">\r\n      <button class=\"btn\" (click)=\"openAddModal()\">Add new</button>\r\n    </div>\r\n  </clr-dg-footer>\r\n</clr-datagrid>\r\n<clr-modal #addModal [(clrModalOpen)]=\"addModalOpened\" *ngIf=\"addModalOpened\">\r\n  <h3 class=\"modal-title\">Add row</h3>\r\n  <div class=\"modal-body\">\r\n    <clr-alert\r\n      [clrAlertType]=\"'success'\"\r\n      [(clrAlertClosed)]=\"!showItemAddConfirmation\"\r\n    >\r\n      <clr-alert-item>\r\n        <span class=\"alert-text\">Item successfully added.</span>\r\n      </clr-alert-item>\r\n    </clr-alert>\r\n    <form\r\n      clrForm\r\n      [formGroup]=\"formGroup\"\r\n      *ngFor=\"let column of interface.columns; index as i\"\r\n      clrLayout=\"vertical\"\r\n    >\r\n      <clr-date-container *ngIf=\"isType(column, 'date-select')\">\r\n        <label for=\"\">{{ column[\"label\"] }}</label>\r\n        <input type=\"date\" clrDate [formControl]=\"formArray.controls[i]\" />\r\n      </clr-date-container>\r\n      <clr-select-container *ngIf=\"isType(column, 'division-select')\">\r\n        <label for=\"\">{{ column[\"label\"] }}</label>\r\n        <select\r\n          clrSelect\r\n          *ngIf=\"constants\"\r\n          [formControl]=\"formArray.controls[i]\"\r\n        >\r\n          <option\r\n            [value]=\"division.label\"\r\n            *ngFor=\"let division of constants['divisions']\"\r\n          >\r\n            {{ division.label }}</option\r\n          >\r\n        </select>\r\n      </clr-select-container>\r\n      <clr-input-container *ngIf=\"isType(column, 'text')\">\r\n        <label for=\"\">{{ column[\"label\"] }}</label>\r\n        <input clrInput type=\"text\" [formControl]=\"formArray.controls[i]\" />\r\n      </clr-input-container>\r\n      <clr-input-container *ngIf=\"isType(column, 'number')\">\r\n        <label for=\"\">{{ column[\"label\"] }}</label>\r\n        <input clrInput type=\"number\" [formControl]=\"formArray.controls[i]\" />\r\n      </clr-input-container>\r\n      <clr-checkbox-container *ngIf=\"isType(column, 'tag-select')\">\r\n        <label for=\"\">{{ column[\"label\"] }}</label>\r\n        <clr-checkbox-wrapper *ngFor=\"let tag of column.tags; index as j\">\r\n          <input\r\n            type=\"checkbox\"\r\n            clrCheckbox\r\n            [formControl]=\"getCheckboxControl(i, j, formArray)\"\r\n          />\r\n          <label>{{ tag.icon }} {{ tag.label }}</label>\r\n        </clr-checkbox-wrapper>\r\n      </clr-checkbox-container>\r\n    </form>\r\n  </div>\r\n  <div class=\"modal-footer\">\r\n    <button type=\"button\" class=\"btn btn-outline\" (click)=\"addModalCancel()\">\r\n      Cancel\r\n    </button>\r\n    <button\r\n      type=\"button\"\r\n      class=\"btn\"\r\n      (click)=\"addAnother()\"\r\n      [disabled]=\"formArray.invalid\"\r\n    >\r\n      Add another\r\n    </button>\r\n    <button\r\n      type=\"button\"\r\n      class=\"btn btn-success\"\r\n      (click)=\"finishAddModal()\"\r\n      [disabled]=\"formArray.invalid\"\r\n    >\r\n      Add and finish\r\n    </button>\r\n  </div>\r\n</clr-modal>\r\n<clr-modal\r\n  #editModal\r\n  [(clrModalOpen)]=\"editModalOpened\"\r\n  *ngIf=\"editModalOpened\"\r\n>\r\n  <h3 class=\"modal-title\">Edit row</h3>\r\n  <div class=\"modal-body\">\r\n    <!-- <clr-alert\r\n      [clrAlertType]=\"'success'\"\r\n      [(clrAlertClosed)]=\"!showItemAddConfirmation\"\r\n    >\r\n      <clr-alert-item>\r\n        <span class=\"alert-text\">Item successfully added.</span>\r\n      </clr-alert-item>\r\n    </clr-alert> -->\r\n    <form\r\n      clrForm\r\n      [formGroup]=\"formGroup\"\r\n      *ngFor=\"let column of interface.columns; index as i\"\r\n      clrLayout=\"vertical\"\r\n    >\r\n      <clr-date-container *ngIf=\"isType(column, 'date-select')\">\r\n        <label for=\"\">{{ column[\"label\"] }}</label>\r\n        <input type=\"date\" clrDate [formControl]=\"formArray.controls[i]\" />\r\n      </clr-date-container>\r\n      <clr-select-container *ngIf=\"isType(column, 'division-select')\">\r\n        <label for=\"\">{{ column[\"label\"] }}</label>\r\n        <select\r\n          clrSelect\r\n          *ngIf=\"constants\"\r\n          [formControl]=\"formArray.controls[i]\"\r\n        >\r\n          <option\r\n            [value]=\"division.label\"\r\n            *ngFor=\"let division of constants['divisions']\"\r\n          >\r\n            {{ division.label }}</option\r\n          >\r\n        </select>\r\n      </clr-select-container>\r\n      <clr-input-container *ngIf=\"isType(column, 'text')\">\r\n        <label for=\"\">{{ column[\"label\"] }}</label>\r\n        <input clrInput type=\"text\" [formControl]=\"formArray.controls[i]\" />\r\n      </clr-input-container>\r\n      <clr-input-container *ngIf=\"isType(column, 'number')\">\r\n        <label for=\"\">{{ column[\"label\"] }}</label>\r\n        <input clrInput type=\"number\" [formControl]=\"formArray.controls[i]\" />\r\n      </clr-input-container>\r\n      <clr-checkbox-container *ngIf=\"isType(column, 'tag-select')\">\r\n        <label for=\"\">{{ column[\"label\"] }}</label>\r\n        <clr-checkbox-wrapper *ngFor=\"let tag of column.tags; index as j\">\r\n          <input\r\n            type=\"checkbox\"\r\n            clrCheckbox\r\n            *ngIf=\"editModalOpened\"\r\n            [formControl]=\"getCheckboxControl(i, j, formArray)\"\r\n          />\r\n          <label>{{ tag.icon }} {{ tag.label }}</label>\r\n        </clr-checkbox-wrapper>\r\n      </clr-checkbox-container>\r\n    </form>\r\n  </div>\r\n  <div class=\"modal-footer\">\r\n    <button type=\"button\" class=\"btn btn-outline\" (click)=\"editModalCancel()\">\r\n      Cancel\r\n    </button>\r\n    <button\r\n      type=\"button\"\r\n      class=\"btn btn-success\"\r\n      (click)=\"finishEdits()\"\r\n      [disabled]=\"formArray.invalid\"\r\n    >\r\n      Apply\r\n    </button>\r\n  </div>\r\n</clr-modal>\r\n","import {\r\n  SimpleInputInterface,\r\n  Input as InputInterface,\r\n} from './../../../interfaces/sections';\r\nimport { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\r\nimport { AbstractSection } from '../abstract-section/abstract-section.component';\r\nimport { FormArray, FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { ReportService } from 'src/app/services/report.service';\r\n\r\n@Component({\r\n  selector: 'simple-input',\r\n  templateUrl: './simple-input.component.html',\r\n  styleUrls: ['./simple-input.component.css'],\r\n})\r\nexport class SimpleInputSection extends AbstractSection implements OnInit {\r\n  formArray = new FormArray([], { updateOn: 'blur' });\r\n  formGroup: FormGroup;\r\n  formLabels: string[] = [];\r\n  inputs: Array<Object>;\r\n  @Input() interface: SimpleInputInterface;\r\n  @Input() meta: boolean;\r\n  @Input() constants: Object;\r\n  @Output() sectionChanged = new EventEmitter<Object>();\r\n\r\n  constructor(private _ReportService: ReportService) {\r\n    super();\r\n  }\r\n\r\n  hasTag(tagArray: Object[], tagObj) {\r\n    let tagLabels: string[] = [];\r\n    if (tagArray) {\r\n      tagArray.forEach((tag) => {\r\n        tagLabels.push(tag['label']);\r\n      });\r\n    }\r\n\r\n    return tagLabels.includes(tagObj['label']);\r\n  }\r\n\r\n  convertISOtoTraditional(isoString: string) {\r\n    let date = new Date(isoString);\r\n    let year = date.getFullYear();\r\n    let month = (date.getMonth() + 1).toString();\r\n    let dt = date.getDate().toString();\r\n\r\n    if (date.getDate() < 10) {\r\n      dt = '0' + dt.toString();\r\n    }\r\n    if (date.getMonth() < 10) {\r\n      month = '0' + month;\r\n    }\r\n    let result = month + '/' + dt + '/' + year;\r\n    console.log('Converting: ' + isoString + ' to ' + result);\r\n    return result;\r\n  }\r\n\r\n  convertTraditionalToISO(inputString: string) {\r\n    let stringPieces = inputString.split('/');\r\n    let monthNum: number = +stringPieces[0] - 1;\r\n    let dateNum: number = +stringPieces[1];\r\n    let yearNum: number = +stringPieces[2];\r\n    let date = new Date();\r\n    date.setMonth(monthNum);\r\n    date.setDate(dateNum);\r\n    date.setFullYear(yearNum);\r\n    let result = date.toISOString();\r\n    console.log('Converting: ' + inputString + ' to ' + result);\r\n    return result;\r\n  }\r\n\r\n  buildForm() {\r\n    if (!this.inputs) {\r\n      console.error('No inputs were found for ' + this.title);\r\n      return;\r\n    }\r\n    this.inputs.forEach((input: InputInterface, index) => {\r\n      this.formLabels.push(input['label']);\r\n\r\n      //if saved data exists, fill the form with that to start\r\n      if (this.interface.value) {\r\n        let savedData = this.interface.value;\r\n        if (input['type'] === 'tag-select') {\r\n          let checkboxArray = new FormArray([]);\r\n          console.log(savedData);\r\n\r\n          input.tags.forEach((tag) => {\r\n            checkboxArray.push(\r\n              savedData[index]\r\n                ? new FormControl(this.hasTag(savedData[index]['tags'], tag))\r\n                : new FormControl()\r\n            );\r\n          });\r\n          this.formArray.push(checkboxArray);\r\n        } else if (input['type'] === 'month-select') {\r\n          this.formArray.push(\r\n            //push the current date\r\n            new FormControl(savedData[index])\r\n          );\r\n        } else if (input['typle'] === 'date-select') {\r\n          this.formArray.push(\r\n            new FormControl(this.convertISOtoTraditional(savedData[index]))\r\n          );\r\n        } else {\r\n          this.formArray.push(new FormControl(savedData[index]));\r\n        }\r\n      } else {\r\n        if (input['type'] === 'tag-select') {\r\n          let checkboxArray = new FormArray([]);\r\n          input.tags.forEach((tag) => {\r\n            checkboxArray.push(new FormControl(null));\r\n          });\r\n          this.formArray.push(checkboxArray);\r\n        } else if (input['type'] === 'month-select') {\r\n          let currentDate = new Date();\r\n          this.formArray.push(\r\n            //push the current date\r\n            new FormControl(currentDate.toISOString())\r\n          );\r\n        } else {\r\n          this.formArray.push(new FormControl(null));\r\n        }\r\n      }\r\n    });\r\n    console.log(this.formArray);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.inputs = (this.interface as SimpleInputInterface).inputs;\r\n    this.buildForm();\r\n    this.formGroup = new FormGroup(\r\n      {\r\n        array: this.formArray,\r\n      },\r\n      { updateOn: 'blur' }\r\n    );\r\n    this.formArray.valueChanges.subscribe((rawFormData: Object[]) => {\r\n      if (this.interface.type === 'meta' && this._ReportService.report) {\r\n        this.interface.inputs.forEach((inputObj: InputInterface, index) => {\r\n          let link = inputObj.link;\r\n\r\n          console.log(link);\r\n          if (link === 'coverageDate') {\r\n            this._ReportService.setCoverageDate(this.formArray.value[index]);\r\n          } else if (link === 'additionalInfo') {\r\n            this._ReportService.setAdditionalInfo(this.formArray.value[index]);\r\n          } else if (link === 'title') {\r\n            this._ReportService.setTitle(this.formArray.value[index]);\r\n          } else if (link === 'subject') {\r\n            this._ReportService.setSubject(this.formArray.value[index]);\r\n          } else if (link === 'tags') {\r\n            this._ReportService.setTags(this.formArray.value[index]);\r\n          }\r\n        });\r\n      }\r\n\r\n      //properly add tags from newData\r\n      console.log(rawFormData);\r\n      let processedVals: Object[] = [];\r\n      rawFormData.forEach((obj, index) => {\r\n        let type = this.interface.inputs[index].type;\r\n        if (type === 'tag-select') {\r\n          let checkTags: Object[] = [];\r\n          let tags = this.interface.inputs[index].tags;\r\n          (obj as Object[]).forEach((checked: boolean, tagIndex) => {\r\n            if (checked) {\r\n              checkTags.push(tags[tagIndex]);\r\n            }\r\n          });\r\n          processedVals.push({ tags: checkTags });\r\n        } else if (type === 'date-select') {\r\n          processedVals.push(\r\n            this.convertTraditionalToISO(rawFormData[index] as string)\r\n          );\r\n        } else {\r\n          processedVals.push(rawFormData[index]);\r\n        }\r\n      });\r\n      console.log(processedVals);\r\n      this.interface.value = processedVals;\r\n      this.sectionChanged.emit(this.interface);\r\n    });\r\n  }\r\n\r\n  getConstant(constantName: string) {\r\n    return ['a', 'b', 'c'];\r\n  }\r\n}\r\n","<h1>{{ interface.title }}</h1>\r\n<h5 class=\"subtitle\" *ngIf=\"interface.subtitle\">{{ interface.subtitle }}</h5>\r\n<form\r\n  clrForm\r\n  [formGroup]=\"formGroup\"\r\n  *ngFor=\"let input of inputs; index as i\"\r\n  clrLayout=\"vertical\"\r\n>\r\n  <clr-date-container *ngIf=\"isType(input, 'date-select')\">\r\n    <label for=\"\">{{ input[\"label\"] }}</label>\r\n    <input type=\"date\" clrDate [formControl]=\"formArray.controls[i]\" />\r\n  </clr-date-container>\r\n  <clr-select-container *ngIf=\"isType(input, 'division-select')\">\r\n    <label for=\"\">{{ input[\"label\"] }}</label>\r\n    <select clrSelect [formControl]=\"formArray.controls[i]\">\r\n      <option\r\n        [value]=\"division.label\"\r\n        *ngFor=\"let division of getConstant('divisions')\"\r\n      >\r\n        {{ division.label }}</option\r\n      >\r\n    </select>\r\n  </clr-select-container>\r\n  <month-select\r\n    *ngIf=\"isType(input, 'month-select')\"\r\n    [label]=\"input['label']\"\r\n    [formControl]=\"formArray.controls[i]\"\r\n  >\r\n  </month-select>\r\n  <clr-input-container *ngIf=\"isType(input, 'text')\">\r\n    <label for=\"\">{{ input[\"label\"] }}</label>\r\n    <input clrInput type=\"text\" [formControl]=\"formArray.controls[i]\" />\r\n  </clr-input-container>\r\n  <clr-input-container *ngIf=\"isType(input, 'number')\">\r\n    <label for=\"\">{{ input[\"label\"] }}</label>\r\n    <input clrInput type=\"number\" [formControl]=\"formArray.controls[i]\" />\r\n  </clr-input-container>\r\n  <clr-checkbox-container *ngIf=\"isType(input, 'tag-select')\">\r\n    <label for=\"\">{{ input[\"label\"] }}</label>\r\n    <clr-checkbox-wrapper *ngFor=\"let tag of input.tags; index as j\">\r\n      <input\r\n        type=\"checkbox\"\r\n        clrCheckbox\r\n        [formControl]=\"getCheckboxControl(i, j, formArray)\"\r\n      />\r\n      <label>{{ tag.icon }} {{ tag.label }}</label>\r\n    </clr-checkbox-wrapper>\r\n  </clr-checkbox-container>\r\n  <clr-textarea-container *ngIf=\"isType(input, 'textarea')\">\r\n    <label>{{ input[\"label\"] }}</label>\r\n    <textarea\r\n      clrTextarea\r\n      name=\"description\"\r\n      [formControl]=\"formArray.controls[i]\"\r\n    ></textarea>\r\n  </clr-textarea-container>\r\n</form>\r\n","import { AngularFirestore } from '@angular/fire/firestore';\r\nimport { ConstantService } from './../../services/constant.service';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  FormArray,\r\n  AbstractControl,\r\n  FormControl,\r\n} from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ClrLoadingState } from '@clr/angular';\r\nimport { ReportService } from 'src/app/services/report.service';\r\nimport { Observable } from 'rxjs';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { TemplateService } from '../../services/template.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Report } from 'src/app/interfaces/report';\r\nimport { User } from 'src/app/interfaces/user';\r\nimport { ClipboardService } from 'ngx-clipboard';\r\n\r\n@Component({\r\n  selector: 'app-start',\r\n  templateUrl: './start.component.html',\r\n  styleUrls: ['./start.component.css'],\r\n})\r\nexport class StartComponent implements OnInit {\r\n  detailState = false;\r\n\r\n  //modal booleans\r\n  editVisible: boolean = false;\r\n  copyVisible: boolean = false;\r\n  deleteVisible: boolean = false;\r\n  exportVisible: boolean = false;\r\n  filterVisible: boolean = false;\r\n\r\n  selectedTemplateName: string;\r\n  newTemplateName: string = '';\r\n\r\n  //alert booleans\r\n  emailSent: boolean = false;\r\n\r\n  //from UserService\r\n  user: Observable<User> = this._UserService.getUserObservable();\r\n  showUnverifiedAlert: boolean;\r\n  reports: Report[] = [];\r\n  selectedReport: Report;\r\n\r\n  templateModalVisible: boolean = false;\r\n  tempDuplicateVisible: boolean = false;\r\n\r\n  reportCount: number = -1;\r\n  selectedReports: Report[] = [];\r\n\r\n  _sizeLimit: string = '10';\r\n\r\n  _constants: Object;\r\n\r\n  //from TemplateService\r\n  templates: Observable<Map<string, Report>>;\r\n\r\n  //for the filter tool\r\n  filterGroup: FormGroup;\r\n  selectedTemplates: string[] = [];\r\n  selectedBranches: string[] = [];\r\n\r\n  //button loading states\r\n  templateLoadStatuses: ClrLoadingState[];\r\n  deleteLoading: ClrLoadingState;\r\n  filterLoading: ClrLoadingState = ClrLoadingState.DEFAULT;\r\n  magicLoading: ClrLoadingState = ClrLoadingState.DEFAULT;\r\n  templateDupStatus: ClrLoadingState = ClrLoadingState.DEFAULT;\r\n\r\n  constructor(\r\n    public _TemplateService: TemplateService,\r\n    public _ReportService: ReportService,\r\n    private _UserService: UserService,\r\n    private _Router: Router,\r\n    private _clipboardService: ClipboardService,\r\n    private fb: FormBuilder,\r\n    private constantService: ConstantService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.user.subscribe((user) => {\r\n      if (user) {\r\n        this.showUnverifiedAlert = !user.emailVerified;\r\n        if (user.role === 'admin') {\r\n          //then load all reports, within quantity limit\r\n          if (this._sizeLimit !== 'all') {\r\n            this._ReportService\r\n              .fetchAllReportsWithLimit(+this._sizeLimit)\r\n              .then((reports) => {\r\n                this.reports = reports;\r\n                console.log(reports);\r\n              })\r\n              .catch(() => {\r\n                console.error('Could not fetch reports for ' + user.email);\r\n              });\r\n          } else {\r\n            this._ReportService\r\n              .fetchAllReports()\r\n              .then((reports) => {\r\n                this.reports = reports;\r\n                console.log(reports);\r\n              })\r\n              .catch(() => {\r\n                console.error('Could not fetch reports for ' + user.email);\r\n              });\r\n          }\r\n        } else {\r\n          if (this._sizeLimit !== 'all') {\r\n            this._ReportService\r\n              .fetchReportsByBranchWithLimit(user.branch, +this._sizeLimit)\r\n              .then((reports) => {\r\n                this.reports = reports;\r\n                console.log(reports);\r\n              })\r\n              .catch(() => {\r\n                console.error('Could not fetch reports for ' + user.email);\r\n              });\r\n          } else {\r\n            this._ReportService\r\n              .fetchReportsByBranch(user.branch)\r\n              .then((reports) => {\r\n                this.reports = reports;\r\n                console.log(reports);\r\n              })\r\n              .catch(() => {\r\n                console.error('Could not fetch reports for ' + user.email);\r\n              });\r\n          }\r\n        }\r\n        this.getReportCount().then((count) => {\r\n          this.reportCount = count;\r\n        });\r\n      }\r\n    });\r\n    this.templates = this._TemplateService.templateObservable;\r\n\r\n    //attach loading statuses to the templates in the 'new report' dropdown\r\n    this.templateLoadStatuses = [];\r\n    this._TemplateService.templateNames.forEach(() => {\r\n      this.templateLoadStatuses.push(ClrLoadingState.DEFAULT);\r\n    });\r\n\r\n    //subscribe to constants\r\n    this.constantService.constants.subscribe((constObj) => {\r\n      this._constants = constObj;\r\n    });\r\n    this.filterGroup = this.fb.group({\r\n      idSearch: [''],\r\n      completionStatus: ['All'],\r\n      template: ['All'],\r\n      authorSearch: [''],\r\n      coverageFrom: [''],\r\n      coverageTo: [''],\r\n      branch: ['All'],\r\n    });\r\n  }\r\n\r\n  get sizeLimit() {\r\n    return this._sizeLimit;\r\n  }\r\n\r\n  getReportCount(): Promise<number> {\r\n    if (this._UserService.getUserSnapshot().role === 'admin') {\r\n      return this._ReportService.getFullReportCount();\r\n    } else {\r\n      return this._ReportService.getReportCountByBranch(\r\n        this._UserService.getUserSnapshot().branch\r\n      );\r\n    }\r\n  }\r\n\r\n  set sizeLimit(newLimit: string) {\r\n    this._sizeLimit = newLimit;\r\n    let user = this._UserService.getUserSnapshot();\r\n    this.showUnverifiedAlert = !user.emailVerified;\r\n    if (user.role === 'admin') {\r\n      //then load all reports, within quantity limit\r\n      if (this._sizeLimit !== 'all') {\r\n        this._ReportService\r\n          .fetchAllReportsWithLimit(+this._sizeLimit)\r\n          .then((reports) => {\r\n            this.reports = reports;\r\n            console.log(reports);\r\n          })\r\n          .catch(() => {\r\n            console.error('Could not fetch reports for ' + user.email);\r\n          });\r\n      } else {\r\n        this._ReportService\r\n          .fetchAllReports()\r\n          .then((reports) => {\r\n            this.reports = reports;\r\n            console.log(reports);\r\n          })\r\n          .catch(() => {\r\n            console.error('Could not fetch reports for ' + user.email);\r\n          });\r\n      }\r\n    } else {\r\n      if (this._sizeLimit !== 'all') {\r\n        this._ReportService\r\n          .fetchReportsByBranchWithLimit(user.branch, +this._sizeLimit)\r\n          .then((reports) => {\r\n            this.reports = reports;\r\n            console.log(reports);\r\n          })\r\n          .catch(() => {\r\n            console.error('Could not fetch reports for ' + user.email);\r\n          });\r\n      } else {\r\n        this._ReportService\r\n          .fetchReportsByBranch(user.branch)\r\n          .then((reports) => {\r\n            this.reports = reports;\r\n            console.log(reports);\r\n          })\r\n          .catch(() => {\r\n            console.error('Could not fetch reports for ' + user.email);\r\n          });\r\n      }\r\n    }\r\n  }\r\n\r\n  showExport(report: Report) {\r\n    this.selectedReport = report;\r\n    this.exportVisible = true;\r\n  }\r\n  hideExport() {\r\n    this.exportVisible = false;\r\n  }\r\n\r\n  isHidden(templateID: string) {\r\n    let templates = this._TemplateService.templateSnapshot;\r\n    if (templates && templates.get(templateID)) {\r\n      return templates.get(templateID).hidden;\r\n    } else return false;\r\n  }\r\n\r\n  duplicateReport(report: Report) {\r\n    console.log(report.id);\r\n    this._ReportService.duplicateReport(report.id).then(\r\n      (newID) => {\r\n        this._ReportService\r\n          .openReport(newID)\r\n          .then(() => {\r\n            this._Router.navigate(['report', newID, 0]);\r\n          })\r\n          .catch((reason) => {\r\n            console.error(\r\n              'Error opening new report with ID ' + newID + ': ' + reason\r\n            );\r\n          });\r\n      },\r\n      () => {\r\n        console.error('Error duplicating report ' + report.id);\r\n      }\r\n    );\r\n  }\r\n  showCopy(report: Report) {\r\n    this.selectedReport = report;\r\n    this.copyVisible = true;\r\n  }\r\n  hideCopy() {\r\n    this.copyVisible = false;\r\n  }\r\n\r\n  showFilterModal() {\r\n    console.log('Showing filter modal');\r\n\r\n    this.filterVisible = true;\r\n  }\r\n\r\n  applyFilter(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.refreshReports().then(() => {\r\n        let result = this.reports;\r\n        let filters = this.filterGroup.value;\r\n        if (filters.idSearch && filters.idSearch.length > 0) {\r\n          result = result.filter((report) =>\r\n            report.id.includes(filters.idSearch)\r\n          );\r\n        }\r\n        if (filters.completionStatus && filters.completionStatus !== 'All') {\r\n          result = result.filter(\r\n            (report) => report.completionStatus === filters.completionStatus\r\n          );\r\n        }\r\n        if (filters.template && filters.template !== 'All') {\r\n          result = result.filter(\r\n            (report) => report.templateID === filters.template\r\n          );\r\n        }\r\n        if (filters.authorSearch && filters.authorSearch.length > 0) {\r\n          result = result.filter(\r\n            (report) =>\r\n              report.author && report.author.includes(filters.authorSearch)\r\n          );\r\n        }\r\n        if (filters.branch && filters.branch !== 'All') {\r\n          result = result.filter(\r\n            (report) => report.branch && report.branch === filters.branch\r\n          );\r\n        }\r\n        if (filters.completionStatus && filters.completionStatus !== 'All') {\r\n          result = result.filter(\r\n            (report) =>\r\n              report.completionStatus &&\r\n              report.completionStatus === filters.completionStatus\r\n          );\r\n        }\r\n        if (filters.coverageFrom && filters.coverageFrom.length > 0) {\r\n          result = result.filter(\r\n            (report) =>\r\n              report.coverageDate &&\r\n              report.coverageDate >=\r\n                this.convertTraditionalToISO(filters.coverageFrom)\r\n          );\r\n        }\r\n        if (filters.coverageTo && filters.coverageTo.length > 0) {\r\n          result = result.filter(\r\n            (report) =>\r\n              report.coverageDate &&\r\n              report.coverageDate <=\r\n                this.convertTraditionalToISO(filters.coverageTo)\r\n          );\r\n        }\r\n        this.reports = result;\r\n        console.log(result);\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  refreshReports(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      if (this._UserService.getUserSnapshot().role === 'admin') {\r\n        //then load all reports, within quantity limit\r\n        if (this._sizeLimit !== 'all') {\r\n          this._ReportService\r\n            .fetchAllReportsWithLimit(+this._sizeLimit)\r\n            .then((reports) => {\r\n              this.reports = reports;\r\n              console.log(reports);\r\n              resolve();\r\n            })\r\n            .catch(() => {\r\n              console.error(\r\n                'Could not fetch reports for ' +\r\n                  this._UserService.getUserSnapshot().email\r\n              );\r\n              reject();\r\n            });\r\n        } else {\r\n          this._ReportService\r\n            .fetchAllReports()\r\n            .then((reports) => {\r\n              this.reports = reports;\r\n              console.log(reports);\r\n              resolve();\r\n            })\r\n            .catch(() => {\r\n              console.error(\r\n                'Could not fetch reports for ' +\r\n                  this._UserService.getUserSnapshot().email\r\n              );\r\n              reject();\r\n            });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  convertTraditionalToISO(inputString: string) {\r\n    if (!inputString) {\r\n      return null;\r\n    }\r\n    let stringPieces = inputString.split('/');\r\n    if (stringPieces.length !== 3) {\r\n      console.warn('Invalid date: ' + inputString);\r\n      return null;\r\n    }\r\n    let monthNum: number = +stringPieces[0] - 1;\r\n    let dateNum: number = +stringPieces[1];\r\n    let yearNum: number = +stringPieces[2];\r\n    let date = new Date();\r\n    date.setMonth(monthNum);\r\n    date.setDate(dateNum);\r\n    date.setFullYear(yearNum);\r\n    let result = date.toISOString();\r\n    console.log('Converting: ' + inputString + ' to ' + result);\r\n    return result;\r\n  }\r\n\r\n  getTemplateCBArray(index: number) {\r\n    if (!(this.filterGroup.get('templateCBs') as FormArray)) {\r\n      return null;\r\n    }\r\n    return (this.filterGroup.get('templatesCBs') as FormArray).controls[index];\r\n  }\r\n\r\n  getBranchCBArray(index: number) {\r\n    if (!this.filterGroup.get('branchCBs')) {\r\n      return null;\r\n    }\r\n    return (this.filterGroup.get('branchCBs') as FormArray).controls[index];\r\n  }\r\n\r\n  clearFilters() {\r\n    this.filterGroup = this.fb.group({\r\n      idSearch: [''],\r\n      completionStatus: ['All'],\r\n      template: ['All'],\r\n      authorSearch: [''],\r\n      coverageFrom: [''],\r\n      coverageTo: [''],\r\n      branch: ['All'],\r\n    });\r\n  }\r\n\r\n  finishFilterModal() {\r\n    this.filterLoading = ClrLoadingState.LOADING;\r\n    console.log(this.filterGroup.value);\r\n    this.applyFilter()\r\n      .then(() => {\r\n        this.filterLoading = ClrLoadingState.SUCCESS;\r\n        this.hideFilterModal();\r\n      })\r\n      .catch((reason) => {\r\n        console.error('Filter application failed: ' + reason);\r\n        this.filterLoading = ClrLoadingState.ERROR;\r\n      });\r\n  }\r\n\r\n  hideFilterModal() {\r\n    this.filterVisible = false;\r\n  }\r\n\r\n  deleteReport(report: Report) {\r\n    this.deleteLoading = ClrLoadingState.LOADING;\r\n    this._ReportService.deleteReport(report).then(() => {\r\n      let user = this._UserService.getUserSnapshot();\r\n      if (user.role === 'admin') {\r\n        //then load all reports, within quantity limit\r\n        if (this._sizeLimit !== 'all') {\r\n          this._ReportService\r\n            .fetchAllReportsWithLimit(+this._sizeLimit)\r\n            .then((reports) => {\r\n              this.reports = reports;\r\n              console.log(reports);\r\n            })\r\n            .catch(() => {\r\n              console.error('Could not fetch reports for ' + user.email);\r\n            });\r\n        } else {\r\n          this._ReportService\r\n            .fetchAllReports()\r\n            .then((reports) => {\r\n              this.reports = reports;\r\n              console.log(reports);\r\n            })\r\n            .catch(() => {\r\n              console.error('Could not fetch reports for ' + user.email);\r\n            });\r\n        }\r\n      } else {\r\n        if (this._sizeLimit !== 'all') {\r\n          this._ReportService\r\n            .fetchReportsByBranchWithLimit(user.branch, +this._sizeLimit)\r\n            .then((reports) => {\r\n              this.reports = reports;\r\n              console.log(reports);\r\n            })\r\n            .catch(() => {\r\n              console.error('Could not fetch reports for ' + user.email);\r\n            });\r\n        } else {\r\n          this._ReportService\r\n            .fetchReportsByBranch(user.branch)\r\n            .then((reports) => {\r\n              this.reports = reports;\r\n              console.log(reports);\r\n            })\r\n            .catch(() => {\r\n              console.error('Could not fetch reports for ' + user.email);\r\n            });\r\n        }\r\n      }\r\n      this.deleteLoading = ClrLoadingState.SUCCESS;\r\n      this.deleteVisible = false;\r\n    });\r\n  }\r\n  showDelete(report: Report) {\r\n    this.selectedReport = report;\r\n    this.deleteVisible = true;\r\n  }\r\n\r\n  copyMagic(reportList: Report[]) {\r\n    this.magicLoading = ClrLoadingState.LOADING;\r\n    this._ReportService.getMagicString(reportList).then((stringResult) => {\r\n      console.log(stringResult);\r\n      this._clipboardService.copyFromContent(stringResult);\r\n      this.magicLoading = ClrLoadingState.SUCCESS;\r\n      alert('🔮 Magic string copied to clipboard.');\r\n    });\r\n  }\r\n\r\n  hideDelete() {\r\n    this.deleteVisible = false;\r\n  }\r\n\r\n  isUnfinished(report: Report) {\r\n    if (report) return report.completionStatus === 'incomplete' ? true : false;\r\n    else return false;\r\n  }\r\n\r\n  resendVerification() {\r\n    this._UserService.sendVerificationEmail().then(() => {\r\n      this.emailSent = true;\r\n      this.showUnverifiedAlert = false;\r\n    });\r\n  }\r\n\r\n  createReport(templateName: string, dropdownIndex: number) {\r\n    this.templateLoadStatuses[dropdownIndex] = ClrLoadingState.LOADING;\r\n    this._ReportService.createNewReport(templateName).then(\r\n      (newID) => {\r\n        this._ReportService\r\n          .openReport(newID)\r\n          .then(() => {\r\n            console.log('Created report: ');\r\n            console.log(this._ReportService.report);\r\n            this._Router.navigate(['report', newID, 0]);\r\n          })\r\n          .catch((reason) => {\r\n            console.error(\r\n              'Error opening new report with ID ' + newID + ': ' + reason\r\n            );\r\n          });\r\n      },\r\n      () => {\r\n        console.error(\r\n          'Error creating new report with template ' + templateName\r\n        );\r\n      }\r\n    );\r\n  }\r\n\r\n  navigate(report: Report) {\r\n    console.log('Opening: ' + report.id);\r\n    this._Router.navigate(['report', report.id, 0]);\r\n  }\r\n\r\n  json(obj) {\r\n    return JSON.stringify(obj);\r\n  }\r\n\r\n  get isAdmin() {\r\n    let user = this._UserService.getUserSnapshot();\r\n    if (user && user.role === 'admin') {\r\n      return true;\r\n    } else return false;\r\n  }\r\n\r\n  showTemplateModal() {\r\n    console.log(this._TemplateService.templateNames);\r\n    this.templateModalVisible = true;\r\n  }\r\n  hideTemplateModal() {\r\n    this.templateModalVisible = false;\r\n  }\r\n  showDuplicateTemplate(selectedTemplate) {\r\n    this.selectedTemplateName = selectedTemplate;\r\n    this.tempDuplicateVisible = true;\r\n  }\r\n  hideDuplicateTemplate() {\r\n    this.tempDuplicateVisible = false;\r\n  }\r\n  duplicateTemplate(selectedTemplateName, newTemplateName) {\r\n    this.templateDupStatus = ClrLoadingState.LOADING;\r\n    this._TemplateService\r\n      .duplicateTemplate(selectedTemplateName, newTemplateName)\r\n      .then(() => {\r\n        this.templateDupStatus = ClrLoadingState.SUCCESS;\r\n        this.tempDuplicateVisible = false;\r\n      });\r\n  }\r\n  deleteTemplate(templateID) {\r\n    this._TemplateService.deleteTemplate(templateID).then(\r\n      () => {\r\n        console.log('Success');\r\n        console.log(this._TemplateService.templateNames);\r\n      },\r\n      (reason) => {\r\n        console.log('Error ' + reason);\r\n      }\r\n    );\r\n  }\r\n}\r\n","<div class=\"clr-row clr-justify-content-center\" style=\"width: 100vw;\">\r\n  <div class=\"clr-col-md-6 alert alert-warning\" *ngIf=\"showUnverifiedAlert\">\r\n    <div class=\"alert-items\">\r\n      <div class=\"alert-item static\" role=\"alert\">\r\n        <div class=\"alert-icon-wrapper\">\r\n          <clr-icon class=\"alert-icon\" shape=\"exclamation-circle\"></clr-icon>\r\n        </div>\r\n        <span class=\"alert-text\">\r\n          In order to continue, please verify your account using the link\r\n          emailed to you, then refresh this page. If you don't receive a\r\n          verification email (check your spam),\r\n          <a href=\"javascript://\" (click)=\"resendVerification()\"\r\n            >click here to resend one</a\r\n          >.\r\n        </span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"clr-col-md-6 alert\" *ngIf=\"emailSent\">\r\n    <div class=\"alert-items\">\r\n      <div class=\"alert-item static\" role=\"alert\">\r\n        <div class=\"alert-icon-wrapper\">\r\n          <clr-icon class=\"alert-icon\" shape=\"exclamation-circle\"></clr-icon>\r\n        </div>\r\n        <span class=\"alert-text\">\r\n          A new email has been sent to you.\r\n        </span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div\r\n    class=\"clr-col clr-col-md-10 clr-col-xl-8\"\r\n    *ngIf=\"(user | async)?.emailVerified\"\r\n  >\r\n    <div class=\"clr-row clr-justify-content-between clr-align-items-end\">\r\n      <h1 *ngIf=\"!isAdmin\">Reports for {{ (user | async)?.branch }}</h1>\r\n      <h1 *ngIf=\"isAdmin\">Reports for all branches</h1>\r\n      <button class=\"btn\" (click)=\"showTemplateModal()\" *ngIf=\"isAdmin\">\r\n        <clr-icon shape=\"scroll\"></clr-icon> Templates\r\n      </button>\r\n      <clr-dropdown [clrCloseMenuOnItemClick]=\"false\">\r\n        <button class=\"btn btn-primary\" clrDropdownTrigger>\r\n          <clr-icon shape=\"plus\"></clr-icon> New report\r\n        </button>\r\n        <clr-dropdown-menu clrPosition=\"bottom-right\" *clrIfOpen>\r\n          <ng-container\r\n            *ngFor=\"\r\n              let template of _TemplateService.visibleTemplates;\r\n              index as i\r\n            \"\r\n          >\r\n            <button\r\n              clrDropdownItem\r\n              [clrLoading]=\"templateLoadStatuses[i]\"\r\n              (click)=\"createReport(template.templateID, i)\"\r\n            >\r\n              {{ template.templateID }}\r\n            </button>\r\n          </ng-container>\r\n          <ng-container *ngIf=\"_TemplateService.visibleTemplates.length < 1\"\r\n            ><clr-icon shape=\"exclamation-triangle\"></clr-icon> No templates are\r\n            available right now.</ng-container\r\n          >\r\n        </clr-dropdown-menu>\r\n      </clr-dropdown>\r\n    </div>\r\n    <div class=\"clr-row\">\r\n      <clr-datagrid style=\"width: 100%;\" [(clrDgSelected)]=\"selectedReports\">\r\n        <clr-dg-placeholder>No reports found.</clr-dg-placeholder>\r\n        <clr-dg-column>ID</clr-dg-column>\r\n        <clr-dg-column>Submitted</clr-dg-column>\r\n        <clr-dg-column>Template</clr-dg-column>\r\n        <clr-dg-column>Author</clr-dg-column>\r\n        <clr-dg-column>Coverage date</clr-dg-column>\r\n\r\n        <clr-dg-action-bar>\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-sm btn-secondary\"\r\n            (click)=\"showFilterModal()\"\r\n          >\r\n            <clr-icon shape=\"filter\"></clr-icon> Filter reports\r\n          </button>\r\n          <button\r\n            *ngIf=\"selectedReports.length > 0\"\r\n            type=\"button\"\r\n            class=\"btn btn-sm btn-magic\"\r\n            (click)=\"copyMagic(selectedReports)\"\r\n            [clrLoading]=\"magicLoading\"\r\n          >\r\n            <clr-icon shape=\"wand\"></clr-icon> Copy magic for\r\n            {{ selectedReports.length }} reports\r\n          </button>\r\n        </clr-dg-action-bar>\r\n\r\n        <clr-dg-row\r\n          *clrDgItems=\"let report of reports; index as i\"\r\n          [clrDgItem]=\"report\"\r\n        >\r\n          <clr-dg-action-overflow>\r\n            <button class=\"action-item\" (click)=\"navigate(report)\">\r\n              <clr-icon shape=\"login\"></clr-icon> Open report\r\n            </button>\r\n            <button class=\"action-item\" (click)=\"showCopy(report)\">\r\n              <clr-icon shape=\"copy\"></clr-icon> Duplicate to new report\r\n            </button>\r\n            <button\r\n              *ngIf=\"!isUnfinished(report) && isAdmin\"\r\n              class=\"action-item\"\r\n              (click)=\"showDelete(report)\"\r\n            >\r\n              <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon> Delete\r\n              report\r\n              <span class=\"badge badge-light-blue\">Admin</span>\r\n            </button>\r\n            <button\r\n              *ngIf=\"isUnfinished(report)\"\r\n              class=\"action-item\"\r\n              (click)=\"showDelete(report)\"\r\n            >\r\n              <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon> Delete draft\r\n            </button>\r\n            <button class=\"action-item\" (click)=\"copyMagic([report])\">\r\n              <clr-icon shape=\"wand\"></clr-icon> Copy magic text\r\n            </button>\r\n          </clr-dg-action-overflow>\r\n          <clr-dg-cell (click)=\"navigate(report)\" class=\"clickable\">{{\r\n            report.id\r\n          }}</clr-dg-cell>\r\n          <clr-dg-cell (click)=\"navigate(report)\" class=\"clickable\"\r\n            >{{ report.submitDate | date: \"shortDate\"\r\n            }}<span *ngIf=\"!report.submitDate\"\r\n              ><em>Unsubmitted</em></span\r\n            ></clr-dg-cell\r\n          >\r\n\r\n          <clr-dg-cell (click)=\"navigate(report)\" class=\"clickable\"\r\n            >{{ report.templateID }}\r\n            <span *ngIf=\"isUnfinished(report)\" class=\"label label-warning\"\r\n              >Draft</span\r\n            >\r\n          </clr-dg-cell>\r\n\r\n          <clr-dg-cell (click)=\"navigate(report)\" class=\"clickable\">{{\r\n            report.author\r\n          }}</clr-dg-cell>\r\n          <clr-dg-cell (click)=\"navigate(report)\" class=\"clickable\">{{\r\n            report.coverageDate | date: \"MMMM \t’yy\"\r\n          }}</clr-dg-cell>\r\n        </clr-dg-row>\r\n        <clr-dg-detail *clrIfDetail=\"let report\">\r\n          <clr-dg-detail-header>Report details</clr-dg-detail-header>\r\n          <clr-dg-detail-body>\r\n            <b>ID: </b> {{ report.id }} <br />\r\n            <b>Coverage date: </b> {{ report.coverageDate | date: \"MMMM \t’yy\" }}\r\n            <br />\r\n            <b>Submitted: </b> {{ report.submitDate | date: \"longDate\" }} <br />\r\n            <b>Author: </b> {{ report.author }} <br />\r\n            <b>Branch: </b> {{ report.branch }} <br />\r\n            <b>Page count: </b> {{ report.pageCount }} <br />\r\n            <b>Completion: </b> {{ report.completionStatus }} <br />\r\n            <b>Additional info: </b>{{ report.additionalInfo }} <br />\r\n          </clr-dg-detail-body>\r\n        </clr-dg-detail>\r\n        <clr-dg-footer\r\n          >Show\r\n          <select name=\"options\" [(ngModel)]=\"sizeLimit\">\r\n            <option value=\"10\">10</option>\r\n            <option value=\"30\">30</option>\r\n            <option value=\"100\">100</option>\r\n            <option value=\"all\">all</option>\r\n          </select>\r\n          reports | {{ reports.length }} of {{ reportCount }}</clr-dg-footer\r\n        >\r\n      </clr-datagrid>\r\n\r\n      <clr-modal [clrModalSize]=\"'sm'\" [(clrModalOpen)]=\"deleteVisible\">\r\n        <h3 class=\"modal-title\">\r\n          Are you sure you want to delete this report?\r\n        </h3>\r\n        <div class=\"modal-body\" *ngIf=\"selectedReport\">\r\n          <p>\r\n            <strong>Template: </strong>{{ selectedReport.templateID\r\n            }}<span\r\n              *ngIf=\"isUnfinished(selectedReport)\"\r\n              class=\"label label-warning\"\r\n              >Draft</span\r\n            >\r\n          </p>\r\n          <p>\r\n            <strong>Coverage date: </strong>{{ selectedReport.coverageDate }}\r\n          </p>\r\n          <p><strong>Author: </strong>{{ selectedReport.author }}</p>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button type=\"button\" class=\"btn btn-outline\" (click)=\"hideDelete()\">\r\n            Cancel\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-danger\"\r\n            [clrLoading]=\"deleteLoading\"\r\n            (click)=\"deleteReport(selectedReport)\"\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </clr-modal>\r\n      <clr-modal\r\n        [clrModalSize]=\"'lg'\"\r\n        [(clrModalOpen)]=\"filterVisible\"\r\n        *ngIf=\"filterVisible\"\r\n      >\r\n        <h3 class=\"modal-title\">\r\n          Filter reports\r\n        </h3>\r\n        <div class=\"modal-body\">\r\n          <p class=\"p5\">\r\n            Note: all fields are optional. Empty filters are not applied.\r\n          </p>\r\n          <form clrForm clrLayout=\"compact\" [formGroup]=\"filterGroup\">\r\n            <clr-input-container>\r\n              <label>Report ID</label>\r\n              <input\r\n                clrInput\r\n                type=\"text\"\r\n                placeholder=\"All\"\r\n                formControlName=\"idSearch\"\r\n              />\r\n            </clr-input-container>\r\n            <clr-input-container>\r\n              <label>Author</label>\r\n              <input\r\n                clrInput\r\n                type=\"text\"\r\n                placeholder=\"All\"\r\n                formControlName=\"authorSearch\"\r\n              />\r\n            </clr-input-container>\r\n            <clr-date-container>\r\n              <label>Coverage date from</label>\r\n              <input\r\n                type=\"date\"\r\n                name=\"date\"\r\n                formControlName=\"coverageFrom\"\r\n                clrDate\r\n              />\r\n            </clr-date-container>\r\n            <clr-date-container>\r\n              <label>Coverage date to</label>\r\n              <input\r\n                type=\"date\"\r\n                name=\"date\"\r\n                formControlName=\"coverageTo\"\r\n                clrDate\r\n              />\r\n            </clr-date-container>\r\n            <clr-select-container>\r\n              <label>Completion status</label>\r\n              <select\r\n                clrSelect\r\n                name=\"options\"\r\n                formControlName=\"completionStatus\"\r\n              >\r\n                <option value=\"All\" selected=\"selected\">All</option>\r\n                <option value=\"complete\">Complete</option>\r\n                <option value=\"incomplete\">Incomplete (draft)</option>\r\n              </select>\r\n            </clr-select-container>\r\n            <clr-select-container clrInline *ngIf=\"filterVisible\">\r\n              <label>Template</label>\r\n              <select clrSelect formControlName=\"template\">\r\n                <option value=\"All\" selected=\"selected\">All</option>\r\n                <option\r\n                  *ngFor=\"\r\n                    let templateID of _TemplateService.templateNames;\r\n                    index as i\r\n                  \"\r\n                  [value]=\"templateID\"\r\n                  >{{ templateID }}</option\r\n                >\r\n              </select>\r\n            </clr-select-container>\r\n            <clr-select-container clrInline *ngIf=\"isAdmin\">\r\n              <label>Branch</label>\r\n              <select clrSelect formControlName=\"branch\">\r\n                <option value=\"All\" selected=\"selected\">All</option>\r\n                <option\r\n                  *ngFor=\"let branch of _constants['branches']; index as i\"\r\n                  [value]=\"branch\"\r\n                  >{{ branch }}</option\r\n                >\r\n              </select>\r\n            </clr-select-container>\r\n          </form>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-outline\"\r\n            (click)=\"clearFilters()\"\r\n          >\r\n            Clear filters\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-primary\"\r\n            [clrLoading]=\"filterLoading\"\r\n            (click)=\"finishFilterModal()\"\r\n          >\r\n            Finish\r\n          </button>\r\n        </div>\r\n      </clr-modal>\r\n      <clr-modal [clrModalSize]=\"'sm'\" [(clrModalOpen)]=\"copyVisible\">\r\n        <h3 class=\"modal-title\">Create a deplicate report?</h3>\r\n        <div class=\"modal-body\" *ngIf=\"selectedReport\">\r\n          <p>This will open the new report in the editor.</p>\r\n          <p>\r\n            <strong>Template: </strong>{{ selectedReport.templateID }}<br />\r\n            <strong>ID: </strong>{{ selectedReport.id }}<br />\r\n            <b>Submitted: </b>{{ selectedReport.submitDate | date\r\n            }}<span\r\n              *ngIf=\"isUnfinished(selectedReport)\"\r\n              class=\"label label-warning\"\r\n              >Draft</span\r\n            >\r\n          </p>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button type=\"button\" class=\"btn btn-outline\" (click)=\"hideCopy()\">\r\n            Cancel\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-primary\"\r\n            (click)=\"duplicateReport(selectedReport)\"\r\n            [clrLoading]=\"templateDupStatus\"\r\n          >\r\n            Duplicate\r\n          </button>\r\n        </div>\r\n      </clr-modal>\r\n      <clr-modal [(clrModalOpen)]=\"templateModalVisible\">\r\n        <h3 class=\"modal-title\">\r\n          {{ _TemplateService.templateNames.length }} templates\r\n        </h3>\r\n        <div class=\"modal-body\">\r\n          <div\r\n            class=\"clr-row clr-align-items-center template-row\"\r\n            style=\"padding-left: 12px;\"\r\n            *ngFor=\"\r\n              let templateID of _TemplateService.templateNames;\r\n              index as i\r\n            \"\r\n          >\r\n            {{ templateID }}\r\n            <clr-dropdown>\r\n              <button\r\n                class=\"btn btn-link btn-sm btn-icon\"\r\n                style=\"padding: 0 12px 0 12px;\"\r\n                clrDropdownTrigger\r\n              >\r\n                <clr-icon shape=\"angle\" dir=\"down\"></clr-icon>\r\n              </button>\r\n              <clr-dropdown-menu clrPosition=\"top-left\" *clrIfOpen>\r\n                <label class=\"dropdown-header\" aria-hidden=\"true\"\r\n                  >Template actions</label\r\n                >\r\n                <div\r\n                  clrDropdownItem\r\n                  (click)=\"_TemplateService.openTemplate(templateID)\"\r\n                >\r\n                  <clr-icon\r\n                    shape=\"angle-double\"\r\n                    dir=\"right\"\r\n                    class=\"is-highlight\"\r\n                  ></clr-icon>\r\n                  Edit\r\n                </div>\r\n                <div\r\n                  clrDropdownItem\r\n                  (click)=\"showDuplicateTemplate(templateID)\"\r\n                >\r\n                  <clr-icon shape=\"copy\"></clr-icon>\r\n                  Duplicate as...\r\n                </div>\r\n                <div\r\n                  clrDropdownItem\r\n                  *ngIf=\"!isHidden(templateID); else showTempl\"\r\n                  (click)=\"_TemplateService.markHidden(templateID)\"\r\n                >\r\n                  <clr-icon shape=\"eye-hide\"></clr-icon>\r\n                  Hide from users\r\n                </div>\r\n                <ng-template #showTempl>\r\n                  <div\r\n                    clrDropdownItem\r\n                    (click)=\"_TemplateService.markVisible(templateID)\"\r\n                  >\r\n                    <clr-icon shape=\"eye\"></clr-icon>\r\n                    Show to users\r\n                  </div>\r\n                </ng-template>\r\n                <div clrDropdownItem (click)=\"deleteTemplate(templateID)\">\r\n                  <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                  Delete\r\n                </div>\r\n              </clr-dropdown-menu>\r\n            </clr-dropdown>\r\n          </div>\r\n          <div class=\"clr-row clr-justify-content-end\">\r\n            <button\r\n              class=\"btn btn-sm btn-link btn-icon\"\r\n              style=\"margin: 24px 0 0 0;\"\r\n              (click)=\"_TemplateService.newTemplate()\"\r\n            >\r\n              Create new\r\n              <clr-icon\r\n                shape=\"plus\"\r\n                dir=\"right\"\r\n                title=\"This will open a blank template in the builder.\"\r\n              ></clr-icon>\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-outline\"\r\n            (click)=\"hideTemplateModal()\"\r\n          >\r\n            Close\r\n          </button>\r\n        </div>\r\n      </clr-modal>\r\n      <clr-modal [clrModalSize]=\"'sm'\" [(clrModalOpen)]=\"tempDuplicateVisible\">\r\n        <h3 class=\"modal-title\">Duplicate {{ selectedTemplateName }}</h3>\r\n        <div class=\"modal-body\">\r\n          <clr-input-container>\r\n            <label>New template name</label>\r\n            <input clrInput [(ngModel)]=\"newTemplateName\" required />\r\n            <clr-control-helper\r\n              >What should the new template be named?</clr-control-helper\r\n            >\r\n          </clr-input-container>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-outline\"\r\n            (click)=\"hideTemplateModal()\"\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-primary\"\r\n            [disabled]=\"newTemplateName.length < 1\"\r\n            (click)=\"duplicateTemplate(selectedTemplateName, newTemplateName)\"\r\n          >\r\n            Duplicate\r\n          </button>\r\n        </div>\r\n      </clr-modal>\r\n    </div>\r\n  </div>\r\n  <!-- <div class=\"clr-break-row\"></div>\r\n  <div class=\"clr-col-md-4\">\r\n    <h1>You can do this.</h1>\r\n  </div>\r\n  <div class=\"clr-break-row\"></div>\r\n  <div class=\"clr-col-md-4\">\r\n\r\n  </div>\r\n  <div class=\"clr-break-row\"></div>\r\n  <div class=\"clr-col-md-4\">\r\n    <clr-dropdown style=\"width: 100%;\">\r\n      <button\r\n        class=\"btn btn-primary\"\r\n        clrDropdownTrigger\r\n        [disabled]=\"!userVerified\"\r\n      >\r\n        Copy an old report\r\n        <clr-icon shape=\"caret down\"></clr-icon>\r\n      </button>\r\n      <clr-dropdown-menu clrPosition=\"bottom-left\" *clrIfOpen>\r\n        <button clrDropdownItem routerLink=\"/report/branch-usage/1\">\r\n          <clr-icon shape=\"plus-circle\"></clr-icon> From blank template\r\n        </button>\r\n        <button clrDropdownItem routerLink=\"/report/branch-usage/1\">\r\n          <clr-icon shape=\"unarchive\"></clr-icon> Based on a previous one\r\n        </button>\r\n      </clr-dropdown-menu>\r\n    </clr-dropdown>\r\n  </div>\r\n  <div class=\"clr-break-row\"></div>\r\n  <div class=\"clr-col-md-4\">\r\n    <button\r\n      class=\"btn btn-outline-primary\"\r\n      style=\"width: 100%;\"\r\n      [disabled]=\"!userVerified\"\r\n    >\r\n      View old reports\r\n    </button>\r\n  </div>\r\n  <div class=\"clr-break-row\"></div> -->\r\n</div>\r\n","import { Injectable } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { first } from 'rxjs/operators';\nimport { Observable, BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConstantService {\n  private _constants: BehaviorSubject<Object>;\n  constructor(private _AngularFirestore: AngularFirestore) {\n    this._constants = new BehaviorSubject<Object>(null);\n    let constDoc = this._AngularFirestore.doc<any>('constants/constants');\n    constDoc.valueChanges();\n    constDoc.valueChanges().subscribe((constants) => {\n      console.log(constants);\n      this._constants.next(constants);\n    });\n  }\n\n  get constants(): Observable<Object> {\n    return this._constants.asObservable();\n  }\n}\n","import { UnifiedReport } from './../interfaces/report';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\nimport { Router } from '@angular/router';\r\nimport { Report } from 'src/app/interfaces/report';\r\nimport {\r\n  BehaviorSubject,\r\n  range,\r\n  Observable,\r\n  Subscription,\r\n  combineLatest,\r\n} from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { Page } from 'src/app/interfaces/page';\r\nimport { AngularFirestore } from '@angular/fire/firestore';\r\nimport { first } from 'rxjs/operators';\r\nimport { resolve } from 'dns';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ReportService {\r\n  private report$: BehaviorSubject<Report>;\r\n  private _report: Report;\r\n  private page$: BehaviorSubject<Page>;\r\n  private _page: Page;\r\n  constructor(\r\n    private _AngularFirestore: AngularFirestore,\r\n    private _Router: Router,\r\n    private _UserService: UserService\r\n  ) {\r\n    this.report$ = new BehaviorSubject<Report>(this._report); //undefined\r\n    this.page$ = new BehaviorSubject<Page>(this._page); //undefined\r\n  }\r\n\r\n  openReport(reportID: string, startPage: number = 0): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      let reportDoc = this._AngularFirestore.doc<Report>(\r\n        '/reports/' + reportID\r\n      );\r\n      //grab the requested\r\n      reportDoc\r\n        .valueChanges()\r\n        .pipe(first())\r\n        .subscribe((report) => {\r\n          this._report = report;\r\n          this.report$.next(report);\r\n          if (this._report === undefined) {\r\n            console.error(\r\n              '[Report Serv] Report ' + reportID + ' does not exist.'\r\n            );\r\n            reject();\r\n          } else {\r\n            reportDoc\r\n              .collection('pages')\r\n              .doc<Page>(startPage.toString())\r\n              .valueChanges()\r\n              .pipe(first())\r\n              .subscribe((page: Page) => {\r\n                this._page = page;\r\n                this.page$.next(page);\r\n                console.log(this._page);\r\n                console.log(\r\n                  '[Report Serv] Report and page successfully opened.'\r\n                );\r\n                resolve();\r\n              });\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  generateReportID(\r\n    checkUniqueness = true,\r\n    length = 4,\r\n    override?: string\r\n  ): Promise<string> {\r\n    return new Promise<string>((resolve, reject) => {\r\n      let chars = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n      let result = '';\r\n      //randomly generate a string if one isn't provided\r\n      if (!navigator.onLine) {\r\n        reject('offline');\r\n      } else if (override) {\r\n        result = override;\r\n      } else {\r\n        for (let i = length; i > 0; --i) {\r\n          result += chars[Math.floor(Math.random() * chars.length)];\r\n        }\r\n      }\r\n      //if enabled, check the uniqueness with the remote database\r\n      if (checkUniqueness) {\r\n        let reportCollection = this._AngularFirestore.collection(\r\n          '/reports',\r\n          (ref) => ref.where('id', '==', result)\r\n        );\r\n        reportCollection\r\n          .valueChanges()\r\n          .pipe(first())\r\n          .subscribe((observer) => {\r\n            if (observer.length > 0) {\r\n              console.warn(\r\n                '[Report Serv] Generated ID is not unique. Retrying...'\r\n              );\r\n              this.generateReportID().then((result) => resolve(result));\r\n            } else resolve(result);\r\n          });\r\n      } else resolve(result);\r\n    });\r\n  }\r\n\r\n  createNewReport(templateID: string): Promise<string> {\r\n    return new Promise<string>((resolve, reject) => {\r\n      if (!navigator.onLine) {\r\n        reject();\r\n      } else {\r\n        let templateReport: Report;\r\n        let templateDoc = this._AngularFirestore.doc<Report>(\r\n          '/templates/' + templateID\r\n        );\r\n        templateDoc\r\n          .get()\r\n          .pipe(first())\r\n          .subscribe(\r\n            (report) => {\r\n              templateReport = report.data() as Report;\r\n              this.generateReportID().then((newReportID) => {\r\n                let reportDoc = this._AngularFirestore.doc<Report>(\r\n                  '/reports/' + newReportID\r\n                );\r\n                templateReport.id = newReportID;\r\n                templateReport.author = this._UserService.getUserSnapshot().email;\r\n                templateReport.branch = this._UserService.getUserSnapshot().branch;\r\n                reportDoc.set(templateReport).then(\r\n                  //create the pages in a collection\r\n                  () => {\r\n                    let pageCopyPromises: Promise<void>[] = [];\r\n                    templateReport.pageStatuses.forEach((status, index) => {\r\n                      let copyPromise = new Promise<void>((resolve, reject) => {\r\n                        let fromDoc = templateDoc\r\n                          .collection('pages')\r\n                          .doc<Page>(index.toString());\r\n                        fromDoc\r\n                          .valueChanges()\r\n                          .pipe(first())\r\n                          .subscribe((page) => {\r\n                            let toDoc = reportDoc\r\n                              .collection('pages')\r\n                              .doc(index.toString());\r\n                            console.log(page);\r\n                            toDoc.set(page).then(resolve).catch(reject);\r\n                          }, reject);\r\n                      });\r\n                      pageCopyPromises.push(copyPromise);\r\n                    });\r\n                    //once all pages are copied, resolve with the new ID.\r\n                    Promise.all(pageCopyPromises).then(() =>\r\n                      resolve(newReportID)\r\n                    );\r\n                  }\r\n                );\r\n              });\r\n            },\r\n            (error) => {\r\n              console.error(error);\r\n              reject();\r\n            }\r\n          );\r\n      }\r\n    });\r\n  }\r\n\r\n  duplicateReport(reportID: string): Promise<string> {\r\n    console.log('[Report Serv] Duplicating ' + reportID);\r\n\r\n    return new Promise<string>((resolve, reject) => {\r\n      //grab old template from database\r\n      this._AngularFirestore\r\n        .doc<Report>('/reports/' + reportID)\r\n        .valueChanges()\r\n        .pipe(first())\r\n        .subscribe((originalReport) => {\r\n          let newReport = originalReport;\r\n\r\n          console.log(newReport);\r\n          //reset templateID, id\r\n          this.generateReportID().then((newReportID) => {\r\n            newReport.templateID = originalReport.templateID;\r\n            newReport.id = newReportID;\r\n            newReport.completionStatus = 'incomplete';\r\n            //save new template to database\r\n            this._AngularFirestore\r\n              .doc('/reports/' + newReportID)\r\n              .set(newReport)\r\n              .then(() => {\r\n                let pagePromises: Promise<void>[] = [];\r\n                for (let i = 0; i < newReport.pageCount; i++) {\r\n                  this._AngularFirestore\r\n                    .doc<Page>(\r\n                      '/reports/' + reportID + '/pages/' + i.toString()\r\n                    )\r\n                    .valueChanges()\r\n                    .pipe(first())\r\n                    .subscribe((oldPage) => {\r\n                      pagePromises.push(\r\n                        this._AngularFirestore\r\n                          .doc(\r\n                            '/reports/' + newReportID + '/pages/' + i.toString()\r\n                          )\r\n                          .set(oldPage)\r\n                      );\r\n                    });\r\n                }\r\n                Promise.all(pagePromises).then(() => {\r\n                  console.log('Report duplicated successfully.');\r\n                  resolve(newReportID);\r\n                }, reject);\r\n              }, reject);\r\n          });\r\n        }, reject);\r\n    });\r\n  }\r\n\r\n  //this returns the full JSON string of a report with all its pages\r\n  getMagicString(reports: Report[]): Promise<string> {\r\n    return new Promise<string>((resolve, reject) => {\r\n      let promiseList: Promise<UnifiedReport>[] = [];\r\n      reports.forEach((report) => {\r\n        promiseList.push(\r\n          new Promise<UnifiedReport>((resolve, reject) => {\r\n            let fullReport: UnifiedReport;\r\n            let reportHeader: Report;\r\n            let pages: Page[] = [];\r\n            let pagePromises: Promise<void>[] = [];\r\n            this._AngularFirestore\r\n              .doc<Report>('/reports/' + report.id)\r\n              .get()\r\n              .pipe(first())\r\n              .subscribe((docSnap) => {\r\n                reportHeader = docSnap.data() as Report;\r\n                for (let i = 0; i < reportHeader.pageCount; i++) {\r\n                  pagePromises.push(\r\n                    new Promise<void>((resolve, reject) => {\r\n                      this._AngularFirestore\r\n                        .doc('/reports/' + report.id + '/pages/' + i.toString())\r\n                        .get()\r\n                        .pipe(first())\r\n                        .subscribe((pageSnap) => {\r\n                          pages.push(pageSnap.data() as Page);\r\n                          resolve();\r\n                        }, reject);\r\n                    })\r\n                  );\r\n                }\r\n                //once all pages are finished loading\r\n                Promise.all(pagePromises).then(() => {\r\n                  fullReport = {\r\n                    id: reportHeader.id,\r\n                    templateID: reportHeader.templateID,\r\n                    title: reportHeader.title || null,\r\n                    coverageDate: reportHeader.coverageDate || null,\r\n                    submitDate: reportHeader.submitDate || null,\r\n                    author: reportHeader.author || null,\r\n                    branch: reportHeader.branch || null,\r\n                    additionalInfo: reportHeader.additionalInfo || null,\r\n                    pageStatuses: reportHeader.pageStatuses || null,\r\n                    pageCount: reportHeader.pageCount,\r\n                    completionStatus: reportHeader.completionStatus,\r\n                    pages: pages,\r\n                  };\r\n                  resolve(fullReport);\r\n                });\r\n              });\r\n          })\r\n        );\r\n      });\r\n\r\n      Promise.all(promiseList).then((fullReports: UnifiedReport[]) => {\r\n        let resultString = JSON.stringify({ reports: fullReports });\r\n        resolve(resultString);\r\n      }, reject);\r\n    });\r\n  }\r\n\r\n  closeReport(redirectToHome: boolean = true) {\r\n    this._report = null;\r\n    this.report$.next(null);\r\n    if (redirectToHome) {\r\n      //go to the home page when closed\r\n      this._Router.navigate(['']);\r\n    }\r\n    console.log('[Report Serv] The report has been successfully closed.');\r\n  }\r\n\r\n  deleteReport(report: Report): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      let reportDoc = this._AngularFirestore.doc('/reports/' + report.id);\r\n      //delete all pages\r\n      for (let i = 0; i < report.pageCount; i++) {\r\n        let pageDoc = reportDoc.collection('pages').doc(i.toString());\r\n        pageDoc.delete();\r\n      }\r\n      reportDoc.delete().then(\r\n        () => {\r\n          console.log('Report deleted');\r\n          resolve();\r\n        },\r\n        (reason) => {\r\n          console.error('Deletion failed: ' + reason);\r\n          reject();\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  openPage(pageNumber: number): Promise<void> {\r\n    console.log('[Report Serv] Opening page ' + pageNumber + '...');\r\n    return new Promise<void>((resolve, reject) => {\r\n      if (!this._report || !navigator.onLine) {\r\n        console.error(\r\n          '[Report Serv] Cannot open page. No report is open or device offline.'\r\n        );\r\n        reject();\r\n      }\r\n      let pageDoc = this._AngularFirestore.doc<Page>(\r\n        '/reports/' + this._report.id + '/pages/' + pageNumber.toString()\r\n      );\r\n      pageDoc\r\n        .valueChanges()\r\n        .pipe(first())\r\n        .subscribe((page) => {\r\n          this._page = page;\r\n          this.page$.next(page);\r\n          resolve();\r\n        }, reject);\r\n    });\r\n  }\r\n\r\n  //this marks the report as 'complete' and grants visibility to admins\r\n  submitReport(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      if (navigator.onLine === false) {\r\n        console.error('[Report Serv] Cannot submit report. Device offline.');\r\n        reject(); //reject if no report is open.\r\n      }\r\n      if (!this._report) {\r\n        console.error('[Report Serv] Cannot submit report. None is open.');\r\n        reject(); //reject if no report is open.\r\n      }\r\n      this._report.completionStatus = 'complete';\r\n      this._report.submitDate = new Date().toISOString();\r\n      this._report.author = this._UserService.getUserSnapshot().email;\r\n      this.report$.next(this._report);\r\n      this.saveReportOnline().then(() => {\r\n        this.closeReport();\r\n        resolve();\r\n      }, reject);\r\n    });\r\n  }\r\n\r\n  attachToBranch(updateOnline: boolean = false) {\r\n    this._report.branch = this._UserService.getUserSnapshot().branch;\r\n    this.report$.next(this._report);\r\n    if (updateOnline) {\r\n      this.saveReportOnline();\r\n    }\r\n  }\r\n\r\n  getReportObservable() {\r\n    return this.report$.asObservable();\r\n  }\r\n  get report(): Report {\r\n    return this._report;\r\n  }\r\n  getPageObservable() {\r\n    return this.page$.asObservable();\r\n  }\r\n  get page(): Page {\r\n    return this._page;\r\n  }\r\n\r\n  saveReportOnline(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      if (!navigator.onLine) {\r\n        console.error(\r\n          '[Report Serv] Cannot save report online. Device offline'\r\n        );\r\n        reject();\r\n      }\r\n      if (this._report) {\r\n        let reportDoc = this._AngularFirestore.doc<Report>(\r\n          'reports/' + this._report.id\r\n        );\r\n        reportDoc.set(this._report).then(() => {\r\n          console.log('[Report Serv] Successfully saved report to server.');\r\n          resolve();\r\n        }, reject);\r\n      } else {\r\n        console.error('[Report Serv] Cannot save report online. None is open.');\r\n        reject();\r\n      }\r\n    });\r\n  }\r\n\r\n  savePageOnline(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      if (!navigator.onLine) {\r\n        console.error('[Report Serv] Cannot save page online. Device offline');\r\n        reject();\r\n      }\r\n      if (this._page) {\r\n        let pageDoc = this._AngularFirestore.doc<Page>(\r\n          'reports/' + this._report.id + '/pages/' + this._page.index\r\n        );\r\n        pageDoc.set(this._page).then(() => {\r\n          console.log(\r\n            '[Report Serv] Successfully saved page ' +\r\n              this._page.index +\r\n              ' to server.'\r\n          );\r\n          resolve();\r\n        }, reject);\r\n      } else {\r\n        console.error('[Report Serv] Cannot save page online. None is open.');\r\n        reject();\r\n      }\r\n    });\r\n  }\r\n\r\n  setSectionValue(pageIndex: number, sectionIndex: number, value: any) {\r\n    console.log(value);\r\n  }\r\n\r\n  setCoverageDate(isoDate: string) {\r\n    if (!isoDate || isNaN(new Date(isoDate).getTime())) {\r\n      console.warn('[Report Serv] Cannot set coverage date. Invalid date.');\r\n      return;\r\n    }\r\n    console.log('[Report Serv] Setting coverage date to ' + isoDate);\r\n    this._report.coverageDate = isoDate;\r\n    this.report$.next(this._report);\r\n  }\r\n  setSubmitDate(isoDate: string) {\r\n    if (isNaN(new Date(isoDate).getTime())) {\r\n      console.error('[Report Serv] Cannot set coverage date. Invalid date.');\r\n      return;\r\n    }\r\n    console.log('[Report Serv] Setting submit date to ' + isoDate);\r\n    this._report.submitDate = isoDate;\r\n    this.report$.next(this._report);\r\n  }\r\n  setAuthor() {\r\n    this._report.author = this._UserService.getUserSnapshot().email;\r\n    this.report$.next(this._report);\r\n  }\r\n  setAdditionalInfo(info: string) {\r\n    console.log('[Report Serv] Setting additional info to ' + info);\r\n    this._report.additionalInfo = info;\r\n    this.report$.next(this._report);\r\n  }\r\n  setTitle(title: string) {\r\n    console.log('[Report Serv] Setting title to ' + title);\r\n    this._report.title = title;\r\n  }\r\n  setSubject(subject: string) {\r\n    console.log('[Report Serv] Setting subject to ' + subject);\r\n    this._report.title = subject;\r\n  }\r\n  setTags(tags: string[]) {\r\n    console.log('[Report Serv] Setting tags to ' + tags);\r\n    this._report.tags = tags;\r\n  }\r\n  setPageStatus(pageIndex: number, status: string) {\r\n    if (!(status === 'complete' || status === 'incomplete')) {\r\n      console.warn('Is ' + status + ' a valid status?');\r\n    }\r\n    this._report.pageStatuses[pageIndex] = status;\r\n    this.report$.next(this._report);\r\n  }\r\n  setCompletionStatus(status: string) {\r\n    if (!(status === 'complete' || status === 'incomplete')) {\r\n      console.warn('Is ' + status + ' a valid status?');\r\n    }\r\n    this._report.completionStatus = status;\r\n  }\r\n\r\n  fetchReports(reportIDs: string[]): Promise<Report[]> {\r\n    let fetchPromises: Promise<Report>[] = [];\r\n    reportIDs.forEach((reportID) => {\r\n      let reportDoc = this._AngularFirestore.doc<Report>('reports/' + reportID);\r\n      let fetchPromise = new Promise<Report>((resolve, reject) => {\r\n        reportDoc\r\n          .valueChanges()\r\n          .pipe(first())\r\n          .subscribe((report) => {\r\n            resolve(report);\r\n          }, reject);\r\n      });\r\n      fetchPromises.push(fetchPromise);\r\n    });\r\n    return Promise.all(fetchPromises);\r\n  }\r\n\r\n  fetchAllReports(): Promise<Report[]> {\r\n    if (\r\n      confirm(\r\n        'This will read all reports from the database, and may take a while. Are you sure?'\r\n      )\r\n    ) {\r\n      return new Promise<Report[]>((resolve, reject) => {\r\n        let queryCollection = this._AngularFirestore.collection<Report>(\r\n          '/reports',\r\n          (ref) => ref.orderBy('id')\r\n        );\r\n        queryCollection\r\n          .valueChanges()\r\n          .pipe(first())\r\n          .subscribe((reports) => {\r\n            resolve(reports);\r\n          }, reject);\r\n      });\r\n    } else {\r\n      return this.fetchAllReportsWithLimit(10);\r\n    }\r\n  }\r\n\r\n  fetchAllReportsWithLimit(sizeLimit: number): Promise<Report[]> {\r\n    return new Promise<Report[]>((resolve, reject) => {\r\n      let queryCollection = this._AngularFirestore.collection<Report>(\r\n        '/reports',\r\n        (ref) => ref.limit(sizeLimit).orderBy('id')\r\n      );\r\n      queryCollection\r\n        .valueChanges()\r\n        .pipe(first())\r\n        .subscribe((reports) => {\r\n          resolve(reports);\r\n        }, reject);\r\n    });\r\n  }\r\n\r\n  fetchReportsByBranchWithLimit(\r\n    branch: string,\r\n    sizeLimit: number\r\n  ): Promise<Report[]> {\r\n    return new Promise<Report[]>((resolve, reject) => {\r\n      let queryCollection = this._AngularFirestore.collection<Report>(\r\n        '/reports',\r\n        (ref) =>\r\n          ref.where('branch', '==', branch).limit(sizeLimit).orderBy('id')\r\n      );\r\n      queryCollection\r\n        .valueChanges()\r\n        .pipe(first())\r\n        .subscribe((reports) => {\r\n          resolve(reports);\r\n        }, reject);\r\n    });\r\n  }\r\n\r\n  fetchReportsByBranch(branch: string): Promise<Report[]> {\r\n    return new Promise<Report[]>((resolve, reject) => {\r\n      let queryCollection = this._AngularFirestore.collection<Report>(\r\n        '/reports',\r\n        (ref) => ref.where('branch', '==', branch).orderBy('id')\r\n      );\r\n      queryCollection\r\n        .valueChanges()\r\n        .pipe(first())\r\n        .subscribe((reports) => {\r\n          resolve(reports);\r\n        }, reject);\r\n    });\r\n  }\r\n\r\n  pushTemplateObjectToDB(template: Report, pages: Page[]) {\r\n    let templateDoc = this._AngularFirestore.doc(\r\n      '/templates/' + template.templateID\r\n    );\r\n    templateDoc.set(template).then(() => {\r\n      let pageCollection = templateDoc.collection('pages');\r\n      pages.forEach((page, index) => {\r\n        pageCollection.doc(index.toString()).set(page);\r\n      });\r\n    });\r\n  }\r\n\r\n  getFullReportCount(): Promise<number> {\r\n    console.log('[Report Serv] Getting full report count');\r\n    return new Promise<number>((resolve, reject) => {\r\n      this._AngularFirestore\r\n        .collection('/reports')\r\n        .get()\r\n        .pipe(first())\r\n        .subscribe((snapshot) => {\r\n          resolve(snapshot.size);\r\n        }, reject);\r\n    });\r\n  }\r\n\r\n  getReportCountByBranch(branchName: string): Promise<number> {\r\n    console.log('[Report Serv] Getting report count for ' + branchName);\r\n    return new Promise<number>((resolve, reject) => {\r\n      this._AngularFirestore\r\n        .collection('/reports', (ref) => ref.where('branch', '==', branchName))\r\n        .get()\r\n        .pipe(first())\r\n        .subscribe((snapshot) => {\r\n          resolve(snapshot.size);\r\n        }, reject);\r\n    });\r\n  }\r\n}\r\n","import { Page } from './../interfaces/page';\r\nimport { UnifiedReport } from './../interfaces/report';\r\nimport { UserService } from './user.service';\r\nimport { Report } from 'src/app/interfaces/report';\r\nimport { Router } from '@angular/router';\r\nimport { Injectable } from '@angular/core';\r\nimport { AngularFirestore } from '@angular/fire/firestore';\r\nimport { first } from 'rxjs/operators';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { rejects } from 'assert';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TemplateService {\r\n  private _templateNames: string[];\r\n  private templates$: BehaviorSubject<Map<string, Report>>;\r\n  private _templates: Map<string, Report>;\r\n\r\n  outlineFileName;\r\n\r\n  constructor(\r\n    public _AngularFirestore: AngularFirestore,\r\n    private _Router: Router,\r\n    private _UserServ: UserService\r\n  ) {\r\n    this._templateNames = [];\r\n    this._templates = new Map();\r\n    this.templates$ = new BehaviorSubject<Map<string, Report>>(this._templates);\r\n    _AngularFirestore\r\n      .collection('templates')\r\n      .get()\r\n      .subscribe((snapshot) => {\r\n        snapshot.forEach((doc) => {\r\n          this._templates.set(doc.id, doc.data() as Report);\r\n          this._templateNames.push(doc.id);\r\n        });\r\n        this.templates$.next(this._templates);\r\n      });\r\n    this._UserServ.getUserObservable().subscribe((user) => {\r\n      console.log('[Template Serv] User changed, refreshing template list');\r\n      this.refreshTemplateList();\r\n    });\r\n  }\r\n\r\n  refreshTemplateList() {\r\n    this._AngularFirestore\r\n      .collection('templates')\r\n      .get()\r\n      .pipe(first())\r\n      .subscribe((snapshot) => {\r\n        this._templateNames = [];\r\n        this._templates.clear();\r\n        snapshot.forEach((doc) => {\r\n          this._templates.set(doc.id, doc.data() as Report);\r\n          this._templateNames.push(doc.id);\r\n        });\r\n        console.log(this._templateNames);\r\n        this.templates$.next(this._templates);\r\n      });\r\n  }\r\n\r\n  get templateNames() {\r\n    return this._templateNames;\r\n  }\r\n\r\n  get visibleTemplates(): Report[] {\r\n    let templates: Report[] = [];\r\n    this._templates.forEach((val, key, map) => {\r\n      if (!val.hidden) {\r\n        templates.push(val);\r\n      }\r\n    });\r\n    return templates;\r\n  }\r\n\r\n  get templateObservable() {\r\n    return this.templates$.asObservable();\r\n  }\r\n\r\n  get templateSnapshot() {\r\n    return this._templates;\r\n  }\r\n\r\n  markHidden(templateID: string): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      let doc = this._AngularFirestore.doc<Report>('/templates/' + templateID);\r\n      doc.get().subscribe((docSnapshot) => {\r\n        if (docSnapshot.exists) {\r\n          doc.update({ hidden: true }).then(() => {\r\n            let oldTemplate = this._templates.get(templateID);\r\n            oldTemplate.hidden = true;\r\n            this._templates.set(templateID, oldTemplate);\r\n            resolve();\r\n          }, reject);\r\n        } else {\r\n          console.error(\r\n            'Cannot mark ' + templateID + ' as hidden. Template does not exist.'\r\n          );\r\n          reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  markVisible(templateID: string): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      let doc = this._AngularFirestore.doc<Report>('/templates/' + templateID);\r\n      doc.get().subscribe((docSnapshot) => {\r\n        if (docSnapshot.exists) {\r\n          doc.update({ hidden: false }).then(() => {\r\n            let oldTemplate = this._templates.get(templateID);\r\n            oldTemplate.hidden = false;\r\n            this._templates.set(templateID, oldTemplate);\r\n            resolve();\r\n          }, reject);\r\n        } else {\r\n          console.error(\r\n            'Cannot mark ' +\r\n              templateID +\r\n              ' as visible. Template does not exist.'\r\n          );\r\n          reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  openTemplate(templateID: string) {\r\n    console.log('[Template Serv] Opening ' + templateID);\r\n    this._Router.navigate(['builder'], { queryParams: { open: templateID } });\r\n  }\r\n  duplicateTemplate(templateID: string, newTemplateID: string): Promise<void> {\r\n    console.log('[Template Serv] Duplicating ' + templateID);\r\n\r\n    return new Promise<void>((resolve, reject) => {\r\n      //grab old template from database\r\n      this._AngularFirestore\r\n        .doc<Report>('/templates/' + templateID)\r\n        .valueChanges()\r\n        .pipe(first())\r\n        .subscribe((template) => {\r\n          let newTemplate = template;\r\n          //reset templateID, id\r\n          newTemplate.templateID = newTemplateID;\r\n          newTemplate.id = '';\r\n          //save new template to database\r\n          this._AngularFirestore\r\n            .doc('/templates/' + newTemplateID)\r\n            .set(newTemplate)\r\n            .then(() => {\r\n              let pagePromises: Promise<void>[] = [];\r\n              for (let i = 0; i < newTemplate.pageCount; i++) {\r\n                this._AngularFirestore\r\n                  .doc<Page>(\r\n                    '/templates/' + templateID + '/pages/' + i.toString()\r\n                  )\r\n                  .valueChanges()\r\n                  .pipe(first())\r\n                  .subscribe((page) => {\r\n                    pagePromises.push(\r\n                      this._AngularFirestore\r\n                        .doc<Page>(\r\n                          '/templates/' +\r\n                            newTemplateID +\r\n                            '/pages/' +\r\n                            i.toString()\r\n                        )\r\n                        .set(page)\r\n                    );\r\n                  });\r\n              }\r\n\r\n              Promise.all(pagePromises).then(() => {\r\n                console.log('Template duplicated successfully.');\r\n                this.refreshTemplateList();\r\n                resolve();\r\n              }, reject);\r\n            }, reject);\r\n        }, reject);\r\n    });\r\n  }\r\n  deleteTemplate(templateID: string): Promise<void> {\r\n    console.log('[Template Serv] Deleting ' + templateID);\r\n    return new Promise<void>((resolve, reject) => {\r\n      let templateDoc = this._AngularFirestore.doc('/templates/' + templateID);\r\n      let template = this._templates.get(templateID);\r\n      let confirmation = prompt(\r\n        'Are you sure? To delete, type \"confirm\": ',\r\n        ''\r\n      );\r\n      if (!(confirmation && confirmation == 'confirm')) {\r\n        reject();\r\n      } else {\r\n        if (!template) {\r\n          reject();\r\n        } else {\r\n          //delete all pages\r\n          for (let i = 0; i < template.pageCount; i++) {\r\n            this._AngularFirestore\r\n              .doc('/templates/' + templateID + '/pages/' + i.toString())\r\n              .delete();\r\n          }\r\n\r\n          templateDoc.delete().then(() => {\r\n            this.refreshTemplateList();\r\n            console.log('Deleted ' + templateDoc.ref.path);\r\n            resolve();\r\n          }, reject);\r\n        }\r\n      }\r\n    });\r\n  }\r\n  newTemplate() {\r\n    console.log('[Template Serv] Opening fresh template');\r\n    this._Router.navigate(['builder']);\r\n  }\r\n  saveTemplate(template: UnifiedReport): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      console.log(\r\n        '[Template Serv] Saving template ' + template.templateID + '...'\r\n      );\r\n      let templateHeader: Report = {\r\n        id: template.id,\r\n        templateID: template.templateID,\r\n        pageCount: template.pageCount,\r\n        pageStatuses: template.pageStatuses,\r\n        completionStatus: template.completionStatus,\r\n      };\r\n      this._AngularFirestore\r\n        .doc<Report>('/templates/' + template.templateID)\r\n        .set(templateHeader)\r\n        .then(() => {\r\n          let pagePromises: Promise<void>[] = [];\r\n          template.pages.forEach((page) => {\r\n            pagePromises.push(\r\n              this._AngularFirestore\r\n                .doc<Page>(\r\n                  '/templates/' +\r\n                    template.templateID +\r\n                    '/pages/' +\r\n                    page.index.toString()\r\n                )\r\n                .set(page)\r\n            );\r\n          });\r\n          Promise.all(pagePromises).then(() => {\r\n            console.log('[Template Serv] Template saved.');\r\n            resolve();\r\n          }, reject);\r\n        }, reject);\r\n    });\r\n  }\r\n  markTemplateHidden(templateID: string): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {});\r\n  }\r\n}\r\n","import { AngularFireAuth } from '@angular/fire/auth';\r\nimport { auth } from 'firebase/app';\r\nimport { BehaviorSubject, Observable, observable } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { User } from 'src/app/interfaces/user';\r\nimport { AngularFireModule } from '@angular/fire';\r\nimport {\r\n  AngularFirestore,\r\n  AngularFirestoreDocument,\r\n} from '@angular/fire/firestore';\r\nimport * as firebase from 'firebase/app';\r\nimport { first } from 'rxjs/operators';\r\nimport { promise } from 'protractor';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserService {\r\n  private _user: User;\r\n  private user$: BehaviorSubject<User>;\r\n\r\n  constructor(\r\n    public _AngularFireAuth: AngularFireAuth,\r\n    private _AngularFirestore: AngularFirestore\r\n  ) {\r\n    this.user$ = new BehaviorSubject<User>(null);\r\n    _AngularFireAuth.user.subscribe((authUser) => {\r\n      if (!authUser) {\r\n        //if no user is logged in, set the user to null\r\n        this._user = null;\r\n        this.user$.next(this._user);\r\n      } else {\r\n        //else fetch the user data from the server\r\n        let userDoc = _AngularFirestore.doc<User>('users/' + authUser.email);\r\n        userDoc\r\n          .valueChanges()\r\n          .pipe(first())\r\n          .subscribe((user) => {\r\n            if (user.emailVerified !== authUser.emailVerified) {\r\n              userDoc\r\n                .update({ emailVerified: authUser.emailVerified })\r\n                .then(() => {\r\n                  user.emailVerified = authUser.emailVerified;\r\n                  this._user = user;\r\n                  this.user$.next(this._user);\r\n                });\r\n            } else {\r\n              this._user = user;\r\n              this.user$.next(this._user);\r\n            }\r\n          });\r\n      }\r\n    });\r\n  }\r\n\r\n  logIn(email: string, password: string): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this._AngularFireAuth.signInWithEmailAndPassword(email, password).then(\r\n        (value) => {\r\n          console.log('[User Serv] Logged in');\r\n          resolve();\r\n        },\r\n        (reason) => {\r\n          console.error('[User Serv] Login failed: ' + reason);\r\n          reject();\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  logOut(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this._AngularFireAuth.signOut().then(\r\n        (value) => {\r\n          console.log('[User Serv] Signed out');\r\n          resolve();\r\n        },\r\n        (reason) => {\r\n          console.error('[User Serv] Signout failed: ' + reason);\r\n          reject();\r\n        }\r\n      );\r\n    });\r\n  }\r\n  createAccount(user: User, password: string): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this._AngularFireAuth\r\n        .createUserWithEmailAndPassword(user.email, password)\r\n        .then((authcred: auth.UserCredential) => {\r\n          this._AngularFirestore\r\n            .doc<User>('users/' + user.email)\r\n            .set(user)\r\n            .then(resolve)\r\n            .catch((error) => {\r\n              console.log('[User Serv] Error creating account: ' + error);\r\n              reject(error);\r\n            });\r\n        })\r\n        .catch((error) => {\r\n          console.log('[User Serv] Error creating account: ' + error);\r\n          reject(error);\r\n        });\r\n    });\r\n  }\r\n\r\n  getUserObservable(): Observable<User> {\r\n    return this.user$.asObservable();\r\n  }\r\n  getUserSnapshot(): User {\r\n    return this._user;\r\n  }\r\n\r\n  setBranch(newBranch: string): Promise<void> {\r\n    let userDoc = this._AngularFirestore.doc<User>('users/' + this._user.email);\r\n    return userDoc.update({ branch: newBranch }).then(() => {\r\n      this._user.branch = newBranch;\r\n    });\r\n  }\r\n\r\n  sendVerificationEmail(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      firebase.auth().currentUser.sendEmailVerification().then(resolve, reject);\r\n    });\r\n  }\r\n}\r\n","export const config = {\r\n  firebase: {\r\n    apiKey: 'AIzaSyBjMPuySzya4rhD6IZTYYIPFKAKS342rsI',\r\n    authDomain: 'ebrpl-reporting.firebaseapp.com',\r\n    databaseURL: 'https://ebrpl-reporting.firebaseio.com',\r\n    projectId: 'ebrpl-reporting',\r\n    storageBucket: 'ebrpl-reporting.appspot.com',\r\n    messagingSenderId: '776684824485',\r\n    appId: '1:776684824485:web:fef2d9dfec9715b6ab6a4c',\r\n  },\r\n};\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  firebase: {\n    apiKey: 'AIzaSyBjMPuySzya4rhD6IZTYYIPFKAKS342rsI',\n    authDomain: 'ebrpl-reporting.firebaseapp.com',\n    databaseURL: 'https://ebrpl-reporting.firebaseio.com',\n    projectId: 'ebrpl-reporting',\n    storageBucket: 'ebrpl-reporting.appspot.com',\n    messagingSenderId: '776684824485',\n    appId: '1:776684824485:web:fef2d9dfec9715b6ab6a4c',\n  },\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n"]}